# -*- mode: org; fill-column: 80 -*-

#+TITLE: LaTeX Reference Manual
#+OPTIONS: toc:2
#+STARTUP: showall
#+PROPERTY: LatexCategory_ALL command environment package parameter
#+TAGS: color font layout graphics box rule space
#+TAGS: math symbol greek operator align
#+TAGS: counter length rubber_length
#+TAGS: bibliography table reference list

This document is an unofficial reference manual for LaTeX, a document
preparation system, version as of May 2012.  It is intended to cover LaTeX2e,
which has been the standard version of LaTeX for many years.

* About this document
  :PROPERTIES:
  :CUSTOM_ID: d2_chapter_About
  :END:

The LaTeX document preparation system is implemented as a macro package
for Donald E. Knuth's TeX typesetting program.  LaTeX was originally
created by Leslie Lamport; it is now maintained by a group of volunteers
([[http://latex-project.org]]).  The official documentation written by the
LaTeX project is available from their web site.

The present document is completely unofficial and has not been reviewed by the
LaTeX maintainers.  Do not send bug reports or anything else about this document
to them.  Instead, please send all comments to [[latexrefman-discuss@gna.org]].

The home page for this document is [[http://home.gna.org/latexrefman]].  That page
has links to the current output in various formats, sources, mailing lists, and
other infrastructure.

Of course, there are many, many other sources of information about LaTeX.  Here
are a few:

  - [[http://www.ctan.org/pkg/latex-doc-ptr]]
    Two pages of recommended references to LaTeX documentation.

  - [[http://www.ctan.org/pkg/first-latex-doc]]
    Writing your first document, with a bit of both text and math.

  - [[http://www.ctan.org/pkg/usrguide]]
    The guide for document authors maintained as part of LaTeX; there are
    several others.

  - [[http://tug.org/begin.html]]
    Introduction to the TeX system, including LaTeX.

* Overview of LaTeX
  :PROPERTIES:
  :CUSTOM_ID: d2_chapter_Overview
  :END:

What is LaTeX?

LaTeX typesets a file of text using the TeX program and the LaTeX "macro
package" for TeX.  That is, it processes an input file containing the text of a
document with interspersed commands that describe how the text should be
formatted.  LaTeX files are plain text that can be written in any reasonable
editor.  It produces at least three files as output:

  1. The main output file, which is one of:

     - .dvi :: If invoked as ~latex~, a "Device Independent" (~.dvi~) file is
               produced.  This contains commands that can be translated into
               commands for virtually any output device.  You can view such
               ~.dvi~ output of LaTeX by using a program such as ~xdvi~ (display
               directly), ~dvips~ (convert to PostScript), or ~dvipdfmx~
               (convert to PDF).

     - .pdf :: If invoked as ~pdflatex~, a "Portable Document Format" (~.pdf~)
               file.  Typically, this is a self-contained file, with all fonts
               and images embedded.  This can be very useful, but it does make
               the output much larger than the ~.dvi~ produced from the same
               document.

               If invoked as ~lualatex~, a ~.pdf~ file is created using the
               LuaTeX engine ([[http://luatex.org]]).

               If invoked as ~xelatex~, a ~.pdf~ file is created using the XeTeX
               engine ([[http://tug.org/xetex]]).

     Many other less-common variants of LaTeX (and TeX) exist, which can produce
     HTML, XML, and other things.

  2. The "transcript" or ~.log~ file that contains summary information and
     diagnostic messages for any errors discovered in the input file.

  3. An "auxiliary" or ~.aux~ file.  This is used by LaTeX itself, for things
     such as cross-references.

An open-ended list of other files might be created.  We won't try to list them
all.  Xxx components?

In the LaTeX input file, a command name starts with a ~\~, followed by either
(a) a string of letters or (b) a single non-letter.  Arguments contained in
square brackets, ~[]~, are optional while arguments contained in braces, ~{}~,
are required.

LaTeX is case sensitive.  Enter all commands in lower case unless explicitly
directed to do otherwise.

* Starting & ending
  :PROPERTIES:
  :CUSTOM_ID: d2_chapter_StartEnd
  :END:

A minimal input file looks like the following:
#+BEGIN_SRC latex
     \documentclass{CLASS}
     \begin{document}
     YOUR TEXT
     \end{document}
#+END_SRC

where the *class* is a valid document class for LaTeX.  See [[#d2_chapter_DocumentClasses][Document Classes]],
for details of the various document classes available locally.

You may include other LaTeX commands between the =\documentclass= and the
=\begin{document}= commands (this area is called the *preamble*).

* Document classes
  :PROPERTIES:
  :CUSTOM_ID: d2_chapter_DocumentClasses
  :END:

The class of a given document is defined with the command:
#+BEGIN_SRC latex
     \documentclass[OPTIONS]{CLASS}
#+END_SRC

The =\documentclass= command must be the first command in a LaTeX source file.

Built-in LaTeX document *class* names are (many other document classes
are available as add-ons; see [[#d2_chap_Overview][Overview]]):

     ~article~  ~report~  ~book~  ~letter~  ~slides~

   Standard *options* are described below.

** Document class options
   :PROPERTIES:
   :CUSTOM_ID: d2_sec_DocClassOpt
   :END:
   

You can specify so-called *global options* or *class options* to the
=\documentclass= command by enclosing them in square brackets as usual.  To
specify more than one *option*, separate them with a comma:

#+BEGIN_SRC latex
     \documentclass[OPTION1,OPTION2,...]{CLASS}
#+END_SRC

Here is the list of the standard class options.

All of the standard classes except ~slides~ accept the following options for
selecting the typeface size (default is ~10pt~):

     ~10pt~  ~11pt~  ~12pt~

All of the standard classes accept these options for selecting the paper size
(default is ~letterpaper~):

     ~a4paper~ ~a5paper~ ~b5paper~ ~executivepaper~ ~legalpaper~ ~letterpaper~

Miscellaneous other options:

- ~draft~, ~final~ :: mark/do not mark overfull boxes with a big black box;
     default is ~final~.
     
- ~fleqn~ :: Put displayed formulas flush left; default is centered.
	     
- ~landscape~ :: Selects landscape format; default is portrait.
		 
- ~leqno~ :: Put equation numbers on the left side of equations; default is the
     right side.
	     
- ~openbib~ :: Use "open" bibliography format.
	       
- ~titlepage~, ~notitlepage~ :: Specifies whether the title page is separate;
     default depends on the class.

These options are not available with the slides class:

- ~onecolumn~, ~twocolumn~ :: Typeset in one or two columns; default is
     ~onecolumn~.
     
- ~oneside~, ~twoside~ :: Selects one- or two-sided layout; default is
     ~oneside~, except for the ~book~ class.

     The =\evensidemargin= (=\oddsidemargin= parameter determines the distance
     on even (odd) numbered pages between the left side of the page and the
     text's left margin.  The defaults vary with the paper size and whether one-
     or two-side layout is selected.  For one-sided printing the text is
     centered, for two-sided, =\oddsidemargin= is 40% of the difference between
     =\paperwidth= and =\textwidth=, with =\evensidemargin= the remainder.
     
- ~openright~, ~openany~ :: Determines if a chapter should start on a right-hand
     page; default is ~openright~ for book.

The ~slides~ class offers the option ~clock~ for printing the time at the bottom
of each note.

Additional packages are loaded like this:
#+BEGIN_SRC latex
     \usepackage[OPTIONS]{PKG}
#+END_SRC

To specify more than one *PKG*, you can separate them with a comma, or use
multiple =\usepackage= commands.

Any options given in the =\documentclass= command that are unknown by the
selected document class are passed on to the packages loaded with =\usepackage=.

* Typefaces							       :font:
  :PROPERTIES:
  :CUSTOM_ID: d2_chapter_Typefaces
  :END:

Two important aspects of selecting a *font* are specifying a size and a style.
The LaTeX commands for doing this are described here.

** Font styles
  :PROPERTIES:
  :CUSTOM_ID: d2_fontStyles
  :END:

The following type style commands are supported by LaTeX.

This first group of commands is typically used like =\textit{italic text}=.  The
corresponding command in parenthesis is the "declaration form", which takes no
arguments.  The scope of the declaration form lasts until the next type style
command or the end of the current group.

The declaration forms are cumulative; i.e., you can say either
=\sffamily\bfseries= or =\bfseries\sffamily= to get bold sans serif.

You can alternatively use an environment form of the declarations; for instance,
=\begin{ttfamily}...\end{ttfamily}=.

These commands automatically supply an italic correction if the

*** \textrm (\rmfamily)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Roman.

*** \textit (\itshape)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Italics.

*** \emph
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Emphasis (switches between =\textit= and =\textrm=).

*** \textmd (\mdseries)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Medium weight (default).

*** \textbf (\bfseries)
    :PROPERTIES:
    :LatexCategory: command
    :END:

     Boldface.
     
*** \textup (\upshape)
    :PROPERTIES:
    :LatexCategory: command
    :END:

     Upright (default).  The opposite of slanted.
     
*** \textsl (\slshape)
    :PROPERTIES:
    :LatexCategory: command
    :END:

     Slanted.
     
*** \textsf (\sffamily)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Sans serif.
     
*** \textsc (\scshape)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Small caps.
     
*** \texttt (\ttfamily)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Typewriter.
     
*** \textnormal (\normalfont)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Main document font.
     
*** \mathrm
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Roman, for use in math mode.
     
*** \mathbf
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Boldface, for use in math mode.
     
*** \mathsf
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Sans serif, for use in math mode.
     
*** \mathtt
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Typewriter, for use in math mode.

*** \mathit (\mit)
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Italics, for use in math mode.

*** \mathnormal
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     For use in math mode, e.g.  inside another type style declaration.
     
*** \mathcal
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
    'Calligraphic' letters, for use in math mode.

*** \mathversion{bold}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
    switching to bold letters and symbols in formulas.

*** \mathversion{normal}
    :PROPERTIES:
    :LatexCategory: command
    :END:

    restores the default.

** Alternative font style commands
LaTeX also provides these commands, which unconditionally switch to the given
style, that is, are _not_ cumulative.  They are used differently than the above
commands, too: ={\CMD ...}= instead of =\CMD{...}=.  These are two very
different things.

*** {\bf ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:

     Switch to bold face.

*** {\cal ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Switch to calligraphic letters for math.

*** {\em ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Emphasis (italics within roman, roman within italics).

*** {\it ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Italics.

*** {\rm ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Roman.

*** {\sc ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Small caps.

*** {\sf ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Sans serif.

*** {\sl ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Slanted (oblique).

*** {\tt ...}
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
     Typewriter (monospace, fixed-width).

** Font sizes
    :PROPERTIES:
    :CUSTOM_ID: d2_sec_fontSizes
    :LatexCategory: command
    :END:
   
*** \tiny
    :PROPERTIES:
    :CUSTOM_ID: d2_tiny
    :LatexCategory: command
    :END:
    
*** \scriptsize
    :PROPERTIES:
    :CUSTOM_ID: d2_scriptsize
    :LatexCategory: command
    :END:
    
*** \footnotesize
    :PROPERTIES:
    :CUSTOM_ID: d2_footnotesize
    :LatexCategory: command
    :END:
    
*** \small
    :PROPERTIES:
    :CUSTOM_ID: d2_small
    :LatexCategory: command
    :END:
    
*** \normalsize
    :PROPERTIES:
    :CUSTOM_ID: d2_normalsize
    :LatexCategory: command
    :END:
    
*** \large
    :PROPERTIES:
    :CUSTOM_ID: d2_large
    :LatexCategory: command
    :END:
    
*** \Large
    :PROPERTIES:
    :CUSTOM_ID: d2_Large
    :LatexCategory: command
    :END:
    
*** \LARGE
    :PROPERTIES:
    :CUSTOM_ID: d2_LARGE
    :LatexCategory: command
    :END:
    
*** \huge
    :PROPERTIES:
    :CUSTOM_ID: d2_huge
    :LatexCategory: command
    :END:
    
*** \Huge
    :PROPERTIES:
    :CUSTOM_ID: d2_Huge
    :LatexCategory: command
    :END:

The following standard type size commands are supported by LaTeX.  The table
shows the command name and the corresponding actual font size used (in points)
with the ~10pt~, ~11pt~, and ~12pt~ document size options, respectively (see 
[[#d2_sec_DocClassOpt][Document class options]]).

| Command                 | ~10pt~ | ~11pt~ | ~12pt~ |
|-------------------------+--------+--------+--------|
| =\tiny=                 |      5 |      6 |      6 |
| =\scriptsize=           |      7 |      8 |      8 |
| =\footnotesize=         |      8 |      9 |     10 |
| =\small=                |      9 |     10 |  10.95 |
| =\normalsize= (default) |     10 |  10.95 |     12 |
| =\large=                |     12 |     12 |   14.4 |
| =\Large=                |   14.4 |   14.4 |  17.28 |
| =\LARGE=                |  17.28 |  17.28 |  20.74 |
| =\huge=                 |  20.74 |  20.74 |  24.88 |
| =\Huge=                 |  24.88 |  24.88 |  24.88 |

The commands as listed here are "declaration forms".  The scope of the
declaration form lasts until the next type style command or the end of the
current group.  You can also use the environment form of these commands; for
instance, =\begin{tiny}...\end{tiny}=.

** Low-level font commands

These commands are primarily intended for writers of macros and packages.  The
commands listed here are only a subset of the available ones.

*** \fontencoding{enc}
    :PROPERTIES:
    :CUSTOM_ID: d2_fontencoding
    :LatexCategory: command
    :END:
    
     Select font encoding.  Valid encodings include ~OT1~ and ~T1~.

*** \fontfamily{family}
    :PROPERTIES:
    :CUSTOM_ID: d2_fontfamily
    :LatexCategory: command
    :END:
    
     Select font family.  Valid families include:

        * ~cmr~ :: for Computer Modern Roman
        * ~cmss~ :: for Computer Modern Sans Serif
        * ~cmtt~ :: for Computer Modern Typewriter

     and numerous others.

*** \fontseries{series}
    :PROPERTIES:
    :CUSTOM_ID: d2_fontseries
    :LatexCategory: command
    :END:
    
     Select font series.  Valid series include:

        * ~m~ :: Medium (normal)
        * ~b~ :: Bold
        * ~c~ :: Condensed
        * ~bc~ :: Bold condensed
        * ~bx~ :: Bold extended

     and various other combinations.

*** \fontshape{shape}
    :PROPERTIES:
    :CUSTOM_ID: d2_fontshape
    :LatexCategory: command
    :END:
    
     Select font shape.  Valid shapes are:

        * ~n~ :: Upright (normal)
        * ~it~ :: Italic
        * ~sl~ :: Slanted (oblique)
        * ~sc~ :: Small caps
        * ~ui~ :: Upright italics
        * ~ol~ :: Outline

The two last shapes are not available for most font families.

*** \fontsize{size}{skip}
    :PROPERTIES:
    :CUSTOM_ID: d2_fontsize
    :LatexCategory: command
    :END:
    
     Set font size.  The first parameter is the font size to switch to and the
     second is the line spacing to use; this is stored in a parameter named
     =\baselineskip=.  The unit of both parameters defaults to pt.  The default
     =\baselineskip= for the Computer Modern typeface is 1.2 times the
     =\fontsize=.

     The line spacing is also multiplied by the value of the =\baselinestretch=
     parameter when the type size changes; the default is 1.  However, the best
     way to "double space" a document, if you should be unlucky enough to have
     to produce such, is to use the ~setspace~ package; see
     [[http://www.tex.ac.uk/cgi-bin/texfaq2html?label=linespace]].

*** \linespread{FACTOR}
    :PROPERTIES:
    :CUSTOM_ID: d2_linespread
    :LatexCategory: command
    :END:

     Equivalent to =\renewcommand{\baselinestretch}{FACTOR}=, and therefore must
     be followed by =\selectfont= to have any effect.  Best specified in the
     preamble, or use the ~setspace~ package, as described just above.

     The changes made by calling the font commands described above do not come
     into effect until =\selectfont= is called.

*** \usefont{enc}{family}{series}{shape}
    :PROPERTIES:
    :CUSTOM_ID: d2_usefont
    :LatexCategory: command
    :END:

     The same as invoking =\fontencoding=, =\fontfamily=, =\fontseries= and
     =\fontshape= with the given parameters, followed by =\selectfont=.

* Layout
  :PROPERTIES:
  :CUSTOM_ID: d2_chap_layout
  :END:

Miscellaneous commands for controlling the general layout of the page.

** \onecolumn
   :PROPERTIES:
   :CUSTOM_ID: d2_onecolumn
   :LatexCategory: command
   :END:

The =\onecolumn= declaration starts a new page and produces single-column
output.  This is the default.

** \twocolumn
   :PROPERTIES:
   :CUSTOM_ID: d2_twocolumn
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \twocolumn[TEXT1COL]
#+END_SRC

The =\twocolumn= declaration starts a new page and produces two-column output.
If the optional *TEXT1COL* argument is present, it is typeset in one-column mode
before the two-column typesetting starts.

These parameters control typesetting in two-column output:

*** \columnsep
    :PROPERTIES:
    :CUSTOM_ID: d2_columnsep
    :LatexCategory: parameter
    :END:
    
     The distance between columns (35pt by default).

*** \columnseprule
    :PROPERTIES:
    :CUSTOM_ID: d2_columnseprule
    :LatexCategory: parameter
    :END:

     The width of the rule between columns; the default is 0pt, so there is no
     rule.

*** \columnwidth
    :PROPERTIES:
    :CUSTOM_ID: d2_columnwidth
    :LatexCategory: parameter
    :END:
    
     The width of the current column; this is equal to =\textwidth= in
     single-column text.

     These parameters control float behavior in two-column output:

*** \dbltopfraction
    :PROPERTIES:
    :CUSTOM_ID: d2_dbltopfraction
    :LatexCategory: parameter
    :END:
    
    Maximum fraction at the top of a two-column page that may be occupied by
    floats.  Default '~.7~', can be usefully redefined to (say) '~.9~' to avoid
    going to float pages so soon.

*** \dblfloatpagefraction
    :PROPERTIES:
    :CUSTOM_ID: d2_dblfloatpagefraction
    :LatexCategory: parameter
    :END:
    
    The minimum fraction of a float page that must be occupied by floats, for a
    two-column float page.  Default '~.5~'.

*** \dblfloatsep
    :PROPERTIES:
    :CUSTOM_ID: d2_dblfloatsep
    :LatexCategory: parameter
    :END:
    
    Distance between floats at the top or bottom of a two-column float page.
    Default '~12pt plus2pt minus2pt~' for '~10pt~' and '~11pt~' documents,
    '~14pt plus2pt minus4pt~' for '~12pt~'.

*** \dbltextfloatsep
    :PROPERTIES:
    :CUSTOM_ID: d2_dbltextfloatsep
    :LatexCategory: parameter
    :END:
    
    Distance between a multi-column float at the top or bottom of a page and the
    main text.  Default '~20pt plus2pt minus4pt~'.

** \flushbottom
   :PROPERTIES:
   :CUSTOM_ID: d2_flushbottom
   :LatexCategory: command
   :END:

The =\flushbottom= declaration makes all text pages the same height, adding
extra vertical space where necessary to fill out the page.

This is the default if ~twocolumn~ mode is selected (see
[[#d2_sec_DocClassOpt][Document class options]]).

** \raggedbottom
   :PROPERTIES:
   :CUSTOM_ID: d2_raggedbottom
   :LatexCategory: command
   :END:

The =\raggedbottom= declaration makes all pages the natural height of the
material on that page.  No rubber lengths will be stretched.

** Page layout parameters
   :PROPERTIES:
   :CUSTOM_ID: d2_sec_pageLayout
   :END:

*** \headheight
    :PROPERTIES:
    :CUSTOM_ID: d2_headheight
    :LatexCategory: parameter
    :END:
    
    Height of the box that contains the running head.  Default is ~30pt~, except
    in the ~book~ class, where it varies with the type size.

*** \headsep
    :PROPERTIES:
    :CUSTOM_ID: d2_headsep
    :LatexCategory: parameter
    :END:
    
    Vertical distance between the bottom of the header line and the top of the
    main text.  Default is ~25pt~, except in the 'book' class, where it varies
    with the type size.

*** \footskip
    :PROPERTIES:
    :CUSTOM_ID: d2_footskip
    :LatexCategory: parameter
    :END:
    
    Distance from the baseline of the last line of text to the baseline of the
    page footer.  Default is ~30pt~, except in the ~book~ class, where it varies
    with the type size.

*** \linewidth
    :PROPERTIES:
    :CUSTOM_ID: d2_linewidth
    :LatexCategory: parameter
    :END:
    
    Width of the current line, decreased for each nested ~list~ (see [[#d2_sec_list][list]]).
    Specifically, it is smaller than =\textwidth= by the sum of =\leftmargin=
    and =\rightmargin= (see [[#d2_itemize][itemize]]).  The default varies with the font size,
    paper width, two-column mode, etc.  For an ~article~ document in ~10pt~,
    it's set to ~345pt~; in two-column mode, that becomes ~229.5pt~.

*** \textheight
    :PROPERTIES:
    :CUSTOM_ID: d2_textheight
    :LatexCategory: parameter
    :END:
    
    The normal vertical height of the page body; the default varies with the
    font size, document class, etc.  For an ~article~ or ~report~ document in
    ~10pt~, it's set to ~43\baselineskip~; for ~book~, it's ~41\baselineskip~.
    For ~11pt~, it's ~38\baselineskip~ and for ~12pt~, ~36\baselineskip~.

*** \textwidth
    :PROPERTIES:
    :CUSTOM_ID: d2_textwidth
    :LatexCategory: parameter
    :END:
    
    The full horizontal width of the entire page body; the default varies as
    usual.  For an ~article~ or ~report~ document, it's ~345pt~ at ~10pt~,
    ~360pt~ at ~11pt~, and ~390pt~ at ~12pt~.  For a ~book~ document, it's
    ~4.5in~ at ~10pt~, and ~5in~ at ~11pt~ or ~12pt~.

    In multi-column output, =\textwidth= remains the width of the entire page
    body, while =\columnwidth= is the width of one column (see [[#d2_twocolumn][\twocolumn]]).

    In lists (see [[#d2_env_list][list]]), =\textwidth= remains the width of the entire
    page body (and =\columnwidth= the width of the entire column), while =\linewidth= may
    decrease for nested lists.

    Inside a minipage (see [[#d2_env_minipage][minipage]]) or =\parbox= (see
    [[#d2_parbox][\parbox]]), all the width-related parameters are set to the specified
    width, and revert to their normal values at the end of the ~minipage~ or =\parbox=.

    For completeness: =\hsize= is the TeX primitive parameter used when text is
    broken into lines.  It should not be used in normal LaTeX documents.

*** \topmargin
    :PROPERTIES:
    :CUSTOM_ID: d2_topmargin
    :LatexCategory: parameter
    :END:
    
    Space between the top of the TeX page (one inch from the top of the paper,
    by default) and the top of the header.  The default is computed based on
    many other parameters: =\paperheight - 2in - \headheight - \headsep -
    \textheight - \footskip=, and then divided by two.

*** \topskip
    :PROPERTIES:
    :CUSTOM_ID: d2_topskip
    :LatexCategory: parameter
    :END:
    
    Minimum distance between the top of the page body and the baseline of the
    first line of text.  For the standard clases, the default is the same as the
    font size, e.g., ~10pt~ at ~10pt~.

* Sectioning

Sectioning commands provide the means to structure your text into units:

** \part
   :PROPERTIES:
   :CUSTOM_ID: d2_part
   :LatexCategory: command
   :END:

** \chapter
   :PROPERTIES:
   :CUSTOM_ID: d2_chapter
   :LatexCategory: command
   :END:
   
   (report and book class only)

** \section
   :PROPERTIES:
   :CUSTOM_ID: d2_section
   :LatexCategory: command
   :END:
   
** \subsection
   :PROPERTIES:
   :CUSTOM_ID: d2_subsection
   :LatexCategory: command
   :END:

** \subsubsection
   :PROPERTIES:
   :CUSTOM_ID: d2_subsubsection
   :LatexCategory: command
   :END:

** \paragraph
   :PROPERTIES:
   :CUSTOM_ID: d2_paragraph
   :LatexCategory: command
   :END:

** \subparagraph
   :PROPERTIES:
   :CUSTOM_ID: d2_subparagraph
   :LatexCategory: command
   :END:

All sectioning commands take the same general form, e.g.,

#+BEGIN_SRC latex
     \chapter[TOCTITLE]{TITLE}
#+END_SRC
     
In addition to providing the heading *TITLE* in the main text, the section title
can appear in two other places:

  1. The table of contents.
  2. The running head at the top of the page.

You may not want the same text in these places as in the main text.  To handle
this, the sectioning commands have an optional argument *TOCTITLE* that, when
given, specifies the text for these other places.

Also, all sectioning commands have ~*~-forms that print *TITLE* as usual, but do
not include a number and do not make an entry in the table of contents.  For
instance:

#+BEGIN_SRC latex
     \section*{Preamble}
#+END_SRC

The =\appendix= command changes the way following sectional units are numbered.
The =\appendix= command itself generates no text and does not affect the
numbering of parts.  The normal use of this command is something like

#+BEGIN_SRC latex
     \chapter{A Chapter}
     ...
     \appendix
     \chapter{The First Appendix}
#+END_SRC
     
The ~secnumdepth~ counter controls printing of section numbers.  The setting

#+BEGIN_SRC latex
     \setcounter{secnumdepth}{LEVEL}
#+END_SRC

suppresses heading numbers at any depth > LEVEL, where ~chapter~ is level zero.
(see [[#d2_setcounter][\setcounter]].)

* Cross references

One reason for numbering things like figures and equations is to refer the
reader to them, as in "See Figure 3 for more details."

** \label
   :PROPERTIES:
   :CUSTOM_ID: d2_label
   :LatexCategory: command
   :END:
   
Synopsis:

#+BEGIN_SRC latex
     \label{KEY}
#+END_SRC

A =\label= command appearing in ordinary text assigns to *KEY* the number of the
current sectional unit; one appearing inside a numbered environment assigns that
number to *KEY*.

A *KEY* name can consist of any sequence of letters, digits, or punctuation
characters.  Upper and lowercase letters are distinguished.

To avoid accidentally creating two labels with the same name, it is common to
use labels consisting of a prefix and a suffix separated by a colon or period.
Some conventionally-used prefixes:

    - ~ch~ :: for chapters
    - ~sec~ :: for lower-level sectioning commands
    - ~fig~ :: for figures
    - ~tab~ :: for tables
    - ~eq~ :: for equations

Thus, a label for a figure would look like ~fig:snark~ or ~fig.snark~.

** \pageref{KEY}
   :PROPERTIES:
   :CUSTOM_ID: d2_pageref
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \pageref{KEY}
#+END_SRC

The =\pageref{KEY}= command produces the page number of the place in the text
where the corresponding =\label{KEY}= command appears.

** \ref{KEY}
   :PROPERTIES:
   :CUSTOM_ID: d2_ref
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \ref{KEY}
#+END_SRC

The =\ref= command produces the number of the sectional unit, equation, footnote, figure,
..., of the corresponding =\label= command (see [[#d2_label][\label]]).  It does not
produce any text, such as the word ~Section~ or ~Figure~, just the bare number itself.

* Environments

LaTeX provides many environments for marking off certain text.  Each environment
begins and ends in the same manner:

#+BEGIN_SRC latex
     \begin{ENVNAME}
     ...
     \end{ENVNAME}
#+END_SRC

** abstract
   :PROPERTIES:
   :CUSTOM_ID: d2_env_abstract
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{abstract}
     ...
     \end{abstract}
#+END_SRC

Environment for producing an abstract, possibly of multiple paragraphs.

** array
   :PROPERTIES:
   :CUSTOM_ID: d2_env_array
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{array}{TEMPLATE}
       COL1 TEXT&COL1 TEXT&COLN}\\
       ...
     \end{array}
#+END_SRC

Math arrays are produced with the ~array~ environment, normally within an ~equation~
environment (see [[#d2_env_equation][equation]]).  It has a single mandatory *TEMPLATE*
argument describing the number of columns and the alignment within them.  Each column COL
is specified by a single letter that tells how items in that row should be formatted, as
follows:

  - ~c~ :: centered
  - ~l~ :: flush left
  - ~r~ :: flush right

Column entries are separated by '~&~'.  Column entries may include other LaTeX
commands.  Each row of the array is terminated with '~\\~'.

In the template, the construct ~@{TEXT}~ puts *TEXT* between columns in each row.

   Here's an example:
   
#+BEGIN_SRC latex
     \begin{equation}
       \begin{array}{lrc}
       left1 & right1 & centered1 \\
       left2 & right2 & centered2 \\
       \end{array}
     \end{equation}
#+END_SRC
   
The =\arraycolsep= parameter defines half the width of the space separating
columns; the default is ~5pt~.  See [[#d2_tabular][tabular]], for other parameters which affect
formatting in ~array~ environments, namely =\arrayrulewidth= and
=\arraystretch=.

The ~array~ environment can only be used in math mode.

** center
   :PROPERTIES:
   :CUSTOM_ID: d2_env_center
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{center}
     LINE1 \\
     LINE2 \\
     \end{center}
#+END_SRC

The ~center~ environment allows you to create a paragraph consisting of lines
that are centered within the left and right margins on the current page.  Each
line is terminated with the string ~\\~.

*** \centering
   :PROPERTIES:
   :CUSTOM_ID: d2_centering
   :LatexCategory: command
   :END:

The =\centering= declaration corresponds to the ~center~ environment.  This
declaration can be used inside an environment such as ~quote~ or in a ~parbox~.
Thus, the text of a figure or table can be centered on the page by putting a
=\centering= command at the beginning of the figure or table environment.

Unlike the ~center~ environment, the =\centering= command does not start a new
paragraph; it simply changes how LaTeX formats paragraph units.  To affect a
paragraph unit's format, the scope of the declaration must contain the blank
line or =\end= command (of an environment such as quote) that ends the paragraph
unit.

   Here's an example:
   
#+BEGIN_SRC latex
     \begin{quote}
     \centering
     first line \\
     second line \\
     \end{quote}
#+END_SRC
   
** description
   :PROPERTIES:
   :CUSTOM_ID: d2_env_description
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{description}
     \item [LABEL1] ITEM1
     \item [LABEL2] ITEM2
     ...
     \end{description}
#+END_SRC

The ~description~ environment is used to make labelled lists.  Each *LABEL* is
typeset in bold, flush right.  The *ITEM* text may contain multiple paragraphs.

Another variation: since the bold style is applied to the labels, if you typeset
a label in typewriter using =\texttt=, you'll get bold typewriter:
=\item[\texttt{bold and typewriter}]=.  This may be too bold, among other
issues.  To get just typewriter, use =\tt=, which resets all other style
variations: =\item[{\tt plain typewriter}]=.

For details about list spacing, see [[#d2_itemize][itemize]].

** displaymath
   :PROPERTIES:
   :CUSTOM_ID: d2_env_displaymath
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{displaymath}
     MATH
     \end{displaymath}
#+END_SRC

or

#+BEGIN_SRC latex
     \[MATH\]
#+END_SRC

The ~displaymath~ environment (=\[...\]= is a synonym) typesets the *MATH* text on
its own line, centered by default.  The global ~fleqn~ option makes equations
flush left; see [[#d2_sec_DocClassOpt][Document class options]].

No equation number is added to ~displaymath~ text; to get an equation number,
use the ~equation~ environment (see [[#d2_env_equation][equation]]).

** document
   :PROPERTIES:
   :CUSTOM_ID: d2_env_document
   :LatexCategory: environment
   :END:

The ~document~ environment encloses the body of a document.  It is required in
every LaTeX document.  see [[#d2_chapter_StartEnd][Starting & ending]].

** enumerate
   :PROPERTIES:
   :CUSTOM_ID: d2_env_enumerate
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{enumerate}
     \item ITEM1
     \item ITEM2
     ...
     \end{enumerate}
#+END_SRC

The ~enumerate~ environment produces a numbered list.  Enumerations can be nested within
one another, up to four levels deep.  They can also be nested within other
paragraph-making environments, such as ~itemize~ (see [[#d2_itemize][itemize]]) and
~description~ (see [[#d2_env_description][description]]).

Each item of an enumerated list begins with an =\item= command.  There must be
at least one =\item= command within the environment.

   By default, the numbering at each level is done like this:

#+BEGIN_QUOTE
  1. 1., 2., ...
  2. (a), (b), ...
  3. i., ii., ...
  4. A., B., ...
#+END_QUOTE
   
The ~enumerate~ environment uses the counters =\enumi= through =\enumiv= counters (see
[[#d2_chap_counters][Counters]]).  If the optional argument to =\item= is given, the
counter is not incremented for that item.

The ~enumerate~ environment uses the commands =\labelenumi= through =\labelenumiv= to
produce the default label.  So, you can use =\renewcommand= to change the labels (see
[[#d2_newcommand][\newcommand & \renewcommand]]).  For instance, to have the first level
use uppercase letters:

#+BEGIN_SRC latex
     \renewcommand{\labelenumi}{\Alph{enumi}}
#+END_SRC

** eqnarray
   :PROPERTIES:
   :CUSTOM_ID: d2_env_eqnarray
   :LatexCategory: environment
   :END:

First, a caveat: the ~eqnarray~ environment has some infelicities which cannot
be overcome; the article "Avoid eqnarray!" by Lars Madsen describes them in
detail ('http://tug.org/TUGboat/tb33-1/tb103madsen.pdf').  The bottom line is
that it is better to use the ~align~ environment (and others) from the ~amsmath~
package.

Nevertheless, here is a description of ~eqnarray~:
   
#+BEGIN_SRC latex
     \begin{eqnarray}  (or 'eqnarray*')
     FORMULA1 \\
     FORMULA2 \\
     ...
     \end{eqnarray}
#+END_SRC

The ~eqnarray~ environment is used to display a sequence of equations or
inequalities.  It is very much like a three-column ~array~ environment, with
consecutive rows separated by ~\\~ and consecutive items within a row separated
by an ~&~.

~\\*~ can also be used to separate equations, with its normal meaning of not
allowing a page break at that line.

An equation number is placed on every line unless that line has a =\nonumber=
command.  Alternatively, The ~*~-form of the environment (=\begin{eqnarray*}
... \end{eqnarray*}=) will omit equation numbering entirely, while otherwise
being the same as ~eqnarray~.

The command =\lefteqn= is used for splitting long formulas across lines.  It
typesets its argument in display style flush left in a box of zero width.

** equation
   :PROPERTIES:
   :CUSTOM_ID: d2_env_equation
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{equation}
     MATH
     \end{equation}
#+END_SRC

The ~equation~ environment starts a ~displaymath~ environment (see
[[#d2_env_displaymath][displaymath]]), e.g., centering the *MATH* text on the page, and
also places an equation number in the right margin.

** figure
   :PROPERTIES:
   :CUSTOM_ID: d2_env_figure
   :LatexCategory: environment
   :END:
   
#+BEGIN_SRC latex
     \begin{figure[*]}[PLACEMENT]
     FIGBODY
     \label{LABEL}
     \caption[LOFTITLE]{TEXT}
     \end{figure}
#+END_SRC
   
Figures are objects that are not part of the normal text, and are instead
"floated" to a convenient place, such as the top of a page.  Figures will not be
split between two pages.

When typesetting in double-columns, the starred form produces a full-width
figure (across both columns).

The optional argument ~[placement]~ determines where LaTeX will try to place
your figure.  There are four places where LaTeX can possibly put a float:

- ~t~ :: (Top) -- at the top of a text page.

- ~b~ :: (Bottom) -- at the bottom of a text page.  However, ~b~ is not allowed
         for full-width floats (~figure*~) with double-column output.  To
         ameliorate this, use the ~stfloats~ or ~dblfloatfix~ package, but see
         the discussion at caveats in the FAQ:
         [[http://www.tex.ac.uk/cgi-bin/texfaq2html?label=2colfloat]].

- ~h~ :: (Here) -- at the position in the text where the figure environment
         appears.  However, this is not allowed by itself; ~t~ is automatically
         added.

	 To absolutely force a figure to appear "here", you can
         =\usepackage{float}= and use the ~H~ specifier which it defines.  For
         further discussion, see the FAQ entry at
         [[http://www.tex.ac.uk/cgi-bin/texfaq2html?label=figurehere]].

- ~p~ :: (Page of floats) -- on a separate float page, which is a page
         containing no text, only floats.

- ~!~ :: Used in addition to one of the above; for this float only, LaTeX
         ignores the restrictions on both the number of floats that can appear
         and the relative amounts of float and non-float text on the page.  The
         ~!~ specifier does _not_ mean "put the float here"; see above.

The standard report and article classes use the default placement ~tbp~.

The body of the figure is made up of whatever text, LaTeX commands, etc. you
wish.

The =\caption= command specifies caption *TEXT* for the figure.  The caption is
numbered by default.  If *LOFTITLE* is present, it is used in the list of figures
instead of *TEXT* (see [[#d2_sec_toc][Tables of contents]]).

Parameters relating to fractions of pages occupied by float and non-float text:

     The maximum fraction of the page allowed to be occuped by floats at
     the bottom; default '.3'.

*** \floatpagefraction
    :PROPERTIES:
    :CUSTOM_ID: d2_floatpagefraction
    :LatexCategory: parameter
    :END:
    
    The minimum fraction of a float page that must be occupied by floats;
    default ~.5~.

*** \textfraction
    :PROPERTIES:
    :CUSTOM_ID: d2_textfraction
    :LatexCategory: parameter
    :END:
    
     Minimum fraction of a page that must be text; if floats take up too
     much space to preserve this much text, floats will be moved to a
     different page.  The default is '.2'.

*** \topfraction
    :PROPERTIES:
    :CUSTOM_ID: d2_topfraction
    :LatexCategory: parameter
    :END:
    
    Maximum fraction at the top of a page that may be occupied before floats;
    default ~.7~.

    Parameters relating to vertical space around floats:

*** \floatsep
    :PROPERTIES:
    :CUSTOM_ID: d2_floatsep
    :LatexCategory: parameter
    :END:
    
    Space between floats at the top or bottom of a page; default ~12pt plus2pt
    minus2pt~.

*** \intextsep
    :PROPERTIES:
    :CUSTOM_ID: d2_intextsep
    :LatexCategory: parameter
    :END:
    
    Space above and below a float in the middle of the main text; default ~12pt
    plus2pt minus2pt~ for ~10pt~ and ~11pt~ styles, ~14pt plus4pt minus4pt~ for
    ~12pt~.

*** \textfloatsep
    :PROPERTIES:
    :CUSTOM_ID: d2_textfloatsep
    :LatexCategory: parameter
    :END:
    
    Space between the last (first) float at the top (bottom) of a page; default
    ~20pt plus2pt minus4pt~.

    Parameters relating to the number of floats on a page:

*** \bottomnumber
    :PROPERTIES:
    :CUSTOM_ID: d2_bottomnumber
    :LatexCategory: parameter
    :END:
    
    Maximum number of floats that can appear at the bottom of a text page;
    default 1.

*** \topnumber
    :PROPERTIES:
    :CUSTOM_ID: d2_topnumber
    :LatexCategory: parameter
    :END:
    
    Maximum number of floats that can appear at the top of a text page;
    default 2.

*** \totalnumber
    :PROPERTIES:
    :CUSTOM_ID: d2_totalnumber
    :LatexCategory: parameter
    :END:
    
    Maximum number of floats that can appear on a text page; default 3.

The principal TeX FAQ entry relating to floats:
http://www.tex.ac.uk/cgi-bin/texfaq2html?label=floats.

** flushleft
   :PROPERTIES:
   :CUSTOM_ID: d2_env_flushleft
   :LatexCategory: environment
   :END:
   
#+BEGIN_SRC latex
     \begin{flushleft}
     LINE1 \\
     LINE2 \\
     ...
     \end{flushleft}
#+END_SRC
   
The ~flushleft~ environment allows you to create a paragraph consisting of lines
that are flush to the left-hand margin and ragged right Each line must be
terminated with the string ~\\~.

*** \raggedright
    :PROPERTIES:
    :CUSTOM_ID: d2_raggedright
    :LatexCategory: command
    :END:

The =\raggedright= declaration corresponds to the ~flushleft~ environment.  This
declaration can be used inside an environment such as ~quote~ or in a ~parbox~.

Unlike the ~flushleft~ environment, the =\raggedright= command does not start a
new paragraph; it only changes how LaTeX formats paragraph units.  To affect a
paragraph unit's format, the scope of the declaration must contain the blank
line or =\end= command that ends the paragraph unit.

** flushright
   :PROPERTIES:
   :CUSTOM_ID: d2_env_flushright
   :LatexCategory: environment
   :END:
   
#+BEGIN_SRC latex
     \begin{flushright}
     LINE1 \\
     LINE2 \\
     ...
     \end{flushright}
#+END_SRC
   
The ~flushright~ environment allows you to create a paragraph consisting of
lines that are flush to the right-hand margin and ragged left.  Each line must
be terminated with the string ~\\~.

*** \raggedleft
   :PROPERTIES:
   :CUSTOM_ID: d2_raggedleft
   :LatexCategory: command
   :END:

The =\raggedleft= declaration corresponds to the ~flushright~ environment.  This
declaration can be used inside an environment such as ~quote~ or in a ~parbox~.

Unlike the ~flushright~ environment, the =\raggedleft= command does not start a
new paragraph; it only changes how LaTeX formats paragraph units.  To affect a
paragraph unit's format, the scope of the declaration must contain the blank
line or =\end= command that ends the paragraph unit.

** itemize
   :PROPERTIES:
   :CUSTOM_ID: d2_env_itemize
   :CURTOM_ID: itemize
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{itemize}
     \item ITEM1
     \item ITEM2
     ...
     \end{itemize}
#+END_SRC

The ~itemize~ environment produces an "unordered", "bulleted" list.
Itemizations can be nested within one another, up to four levels deep.  They can
also be nested within other paragraph-making environments, such as ~enumerate~
(see [[#d2_env_enumerate][enumerate]]).

Each item of an ~itemize~ list begins with an =\item= command.  There must be at
least one =\item= command within the environment.

By default, the marks at each level look like this:

  1. * (bullet)
  2. -- (bold en-dash)
  3. * (asterisk)
  4. .  (centered dot, rendered here as a period)

The ~itemize~ environment uses the commands =\labelitemi= through =\labelitemiv=
to produce the default label.  So, you can use =\renewcommand= to change the
labels.  For instance, to have the first level use diamonds:

#+BEGIN_SRC latex
     \renewcommand{\labelitemi}{$\diamond$}
#+END_SRC

The =\leftmargini= through =\leftmarginvi= parameters define the distance
between the left margin of the enclosing environment and the left margin of the
list.  By convention, =\leftmargin= is set to the appropriate =\leftmarginN=
when a new level of nesting is entered.

The defaults vary from ~.5em~ (highest levels of nesting) to ~2.5em~ (first
level), and are a bit reduced in two-column mode.  This example greatly reduces
the margin space for outermost lists:

#+BEGIN_SRC latex
     \setlength{\leftmargini}{1.25em} % default 2.5em
#+END_SRC

Some parameters that affect list formatting:

*** \itemindent
    :PROPERTIES:
    :CUSTOM_ID: d2_itemindent
    :LatexCategory: parameter
    :END:
    
    Extra indentation before each item in a list; default zero.

*** \labelsep
    :PROPERTIES:
    :CUSTOM_ID: d2_labelsep
    :LatexCategory: parameter 
    :END:
    
    Space between the label and text of an item; default ~.5em~.

*** \labelwidth
    :PROPERTIES:
    :CUSTOM_ID: d2_labelwidth
    :LatexCategory: parameter
    :END:
    
    Width of the label; default ~2em~, or ~1.5em~ in two-column mode.

*** \listparindent
    :PROPERTIES:
    :CUSTOM_ID: d2_listparindent
    :LatexCategory: parameter
    :END:
    
    Extra indentation added to second and subsequent paragraphs within a list
    item; default ~0pt~.

*** \rightmargin
    :PROPERTIES:
    :CUSTOM_ID: d2_rightmargin
    :LatexCategory: parameter
    :END:
    
    Horizontal distance between the right margin of the list and the enclosing
    environment; default ~0pt~, except in the ~quote~, ~quotation~, and ~verse~
    environments, where it is set equal to =\leftmargin=.

    Parameters affecting vertical spacing between list items (rather loose, by
    default).

*** \itemsep
    :PROPERTIES:
    :CUSTOM_ID: d2_itemsep
    :LatexCategory: parameter
    :END:
    
    Vertical space between items.  The default is ~2pt plus1pt minus1pt~ for
    ~10pt~ documents, ~3pt plus2pt minus1pt~ for ~11pt~, and ~4.5pt plus2pt
    minus1pt~ for ~12pt~.

*** \parsep
    :PROPERTIES:
    :CUSTOM_ID: d2_parsep
    :LatexCategory: parameter
    :END:
    
    Extra vertical space between paragraphs within a list item.  Defaults are
    the same as ~\itemsep~.

*** \topsep
    :PROPERTIES:
    :CUSTOM_ID: d2_topsep
    :LatexCategory: parameter
    :END:
    
    Vertical space between the first item and the preceding paragraph.  For
    top-level lists, the default is ~8pt plus2pt minus4pt~ for ~10pt~
    documents, ~9pt plus3pt minus5pt~ for ~11pt~, and ~10pt plus4pt minus6pt~
    for ~12pt~.  These are reduced for nested lists.

*** \partopsep
    :PROPERTIES:
    :CUSTOM_ID: d2_partopsep
    :LatexCategory: parameter
    :END:
    
    Extra space added to =\topsep= when the list environment starts a paragraph.
    The default is ~2pt plus1pt minus1pt~ for ~10pt~ documents, ~3pt plus1pt
    minus1pt~ for ~11pt~, and ~3pt plus2pt minus2pt~ for ~12pt~.

    Especially for lists with short items, it may be desirable to elide space
    between items.  Here is an example defining an ~itemize*~ environment with no
    extra spacing between items, or between paragraphs within a single item
    (=\parskip= is not list-specific, see [[#d2_parskip][\parskip]]):
    
#+BEGIN_SRC latex
     \newenvironment{itemize*}%
       {\begin{itemize}%
         \setlength{\itemsep}{0pt}%
         \setlength{\parsep}{0pt}}%
         \setlength{\parskip}{0pt}}%
       {\end{itemize}}
#+END_SRC
    
** letter environment: writing letters
   :PROPERTIES:
   :LatexCategory: environment
   :END:

This environment is used for creating letters.  see [[#d2_chap_letters][Letters]].

** list
   :PROPERTIES:
   :CUSTOM_ID: d2_env_list
   :LatexCategory: environment
   :END:

The ~list~ environment is a generic environment which is used for defining many
of the more specific environments.  It is seldom used in documents, but often in
macros.

#+BEGIN_SRC latex
     \begin{list}{LABELING}{SPACING}
     \item ITEM1
     \item ITEM2
     ...
     \end{list}
#+END_SRC

The mandatory *LABELING* argument specifies how items should be labelled (unless
the optional argument is supplied to =\item=).  This argument is a piece of text
that is inserted in a box to form the label.  It can and usually does contain
other LaTeX commands.

The mandatory *SPACING* argument contains commands to change the spacing
parameters for the list.  This argument will most often be empty, i.e., ~{}~,
which leaves the default spacing.

The width used for typesetting the list items is specified by =\linewidth=
(see [[#d2_sec_pageLayout][Page layout parameters]]).

** math
   :PROPERTIES:
   :CUSTOM_ID: d2_env_math
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{math}
     MATH
     \end{math}
#+END_SRC

The ~math~ environment inserts the given MATH within the running text.
=\(...\)= and =$...$= are synonyms.  see [[#d2_chap_mathFormulas][Math formulas]].

** minipage
   :PROPERTIES:
   :CUSTOM_ID: d2_env_minipage
   :LatexCategory: environment
   :END:
   
#+BEGIN_SRC latex
     \begin{minipage}[POSITION][HEIGHT][INNER-POS]{WIDTH}
     TEXT
     \end{minipage}
#+END_SRC
   
The ~minipage~ environment typesets its body *TEXT* in a block that will not be broken
across pages.  This is similar to the =\parbox= command (see [[#d2_parbox][\parbox]]), but
unlike =\parbox=, other paragraph-making environments can be used inside a minipage.

The arguments are the same as for =\parbox= (see [[#d2_parbox][\parbox]]).

By default, paragraphs are not indented in the ~minipage~ environment.  You can
restore indentation with a command such as =\setlength{\parindent}{1pc}=
command.

Footnotes in a ~minipage~ environment are handled in a way that is particularly
useful for putting footnotes in figures or tables.  A =\footnote= or
=\footnotetext= command puts the footnote at the bottom of the minipage instead
of at the bottom of the page, and it uses the =\mpfootnote= counter instead of
the ordinary ~footnote~ counter (see [[#d2_chap_counters][Counters]]).

However, don't put one minipage inside another if you are using footnotes; they
may wind up at the bottom of the wrong minipage.

** picture
   :PROPERTIES:
   :CUSTOM_ID: d2_env_picture
   :LatexCategory: environment
   :END:
   
#+BEGIN_SRC latex
     \begin{picture}(width,height)(x offset,y offset)
     ... PICTURE COMMANDS ...
     \end{picture}
#+END_SRC
   
The ~picture~ environment allows you to create just about any kind of picture
you want containing text, lines, arrows and circles.  You tell LaTeX where to
put things in the picture by specifying their coordinates.  A coordinate is a
number that may have a decimal point and a minus sign--a number like ~5~, ~0.3~
or ~-3.1416~.  A coordinate specifies a length in multiples of the unit length
=\unitlength=, so if =\unitlength= has been set to ~1cm~, then the coordinate
2.54 specifies a length of 2.54 centimeters.  You should only change the value
of =\unitlength=, using the =\setlength= command, outside of a ~picture~
environment.

A position is a pair of coordinates, such as ~(2.4,-5)~, specifying the point
with x-coordinate ~2.4~ and y-coordinate ~-5~.  Coordinates are specified in the
usual way with respect to an origin, which is normally at the lower-left corner
of the picture.  Note that when a position appears as an argument, it is not
enclosed in braces; the parentheses serve to delimit the argument.

The ~picture~ environment has one mandatory argument, which is a ~position~.  It
specifies the size of the picture.  The environment produces a rectangular box
with width and height determined by this argument's x- and y-coordinates.

The ~picture~ environment also has an optional ~position~ argument, following
the ~size~ argument, that can change the origin.  (Unlike ordinary optional
arguments, this argument is not contained in square brackets.)  The optional
argument gives the coordinates of the point at the lower-left corner of the
picture (thereby determining the origin).  For example, if =\unitlength= has
been set to ~1mm~, the command

#+BEGIN_SRC latex
     \begin{picture}(100,200)(10,20)
#+END_SRC

produces a picture of width 100 millimeters and height 200 millimeters, whose
lower-left corner is the point (10,20) and whose upper-right corner is therefore
the point (110,220).  When you first draw a picture, you typically omit the
optional argument, leaving the origin at the lower-left corner.  If you then
want to modify your picture by shifting everything, you can just add the
appropriate optional argument.

The environment's mandatory argument determines the nominal size of the picture.
This need bear no relation to how large the picture really is; LaTeX will
happily allow you to put things outside the picture, or even off the page.  The
picture's nominal size is used by LaTeX in determining how much room to leave
for it.

Everything that appears in a picture is drawn by the =\put= command.  The
command

#+BEGIN_SRC latex
     \put (11.3,-.3){...}
#+END_SRC

puts the object specified by '...' in the picture, with its reference point at
coordinates (11.3,-.3).  The reference points for various objects will be
described below.

The =\put= command creates an "LR box".  You can put anything that can go in an =\mbox=
(see [[#d2_mbox][\mbox]]) in the text argument of the =\put= command.  When you do this,
the reference point will be the lower left corner of the box.

The ~picture~ commands are described in the following sections.

*** \circle
    :PROPERTIES:
    :CUSTOM_ID: d2_circle
    :LatexCategory: command
    :END:

#+BEGIN_SRC latex
     \circle[*]{DIAMETER}
#+END_SRC
     
The =\circle= command produces a circle with a diameter as close to the
specified one as possible.  The ~*~-form of the command draws a solid circle.

Circles up to 40 pt can be drawn.

*** \makebox
    :PROPERTIES:
    :CUSTOM_ID: d2_makebox
    :LatexCategory: command
    :END:
    
#+BEGIN_SRC latex
'\makebox(width,height)[position]{...}'
#+END_SRC
    
The =\makebox= command for the picture environment is similar to the normal
=\makebox= command except that you must specify a ~width~ and ~height~ in
multiples of =\unitlength=.

The optional argument, ~[position]~, specifies the quadrant that your text
appears in.  You may select up to two of the following:

- 't' :: Moves the item to the top of the rectangle.

- 'b' :: Moves the item to the bottom.

- 'l' :: Moves the item to the left.

- 'r' :: Moves the item to the right.

see [[#d2_makebox][\makebox]].

*** \framebox
    :PROPERTIES:
    :CUSTOM_ID: d2_framebox
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \framebox(WIDTH,HEIGHT)[POS]{...}
#+END_SRC

The =\framebox= command is like =\makebox= (see [[#d2_makebox][previous section]]), except
that it puts a frame around the outside of the box that it creates.

The =\framebox= command produces a rule of thickness =\fboxrule=, and leaves a
space =\fboxsep= between the rule and the contents of the box.

*** \dashbox
    :PROPERTIES:
    :CUSTOM_ID: d2_dashbox
    :LatexCategory: command
    :END:

Draws a box with a dashed line.  Synopsis:

#+BEGIN_SRC latex
     \dashbox{DLEN}(RWIDTH,RHEIGHT)[POS]{TEXT}
#+END_SRC

=\dashbox= creates a dashed rectangle around *TEXT* in a ~picture~ environment.
Dashes are *DLEN* units long, and the rectangle has overall width *RWIDTH* and
height *RHEIGHT*.  The *TEXT* is positioned at optional *POS*.

A dashed box looks best when the ~rwidth~ and ~rheight~ are multiples of the
~dlen~.

*** \frame
    :PROPERTIES:
    :CUSTOM_ID: d2_frame
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \frame{TEXT}
#+END_SRC

The =\frame= command puts a rectangular frame around *TEXT*.  The reference
point is the bottom left corner of the frame.  No extra space is put between the
frame and the object.

*** \line
    :PROPERTIES:
    :CUSTOM_ID: d2_line
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \line(XSLOPE,YSLOPE){LENGTH}
#+END_SRC

The =\line= command draws a line with the given *LENGTH* and
slope *XSLOPE/YSLOPE*.

Standard LaTeX can only draw lines with *SLOPE = x/y*, where ~x~ and ~y~ have
integer values from -6 through 6.  For lines of any slope, not to mention other
shapes, see the ~curve2e~ and many many other packages on CTAN.

*** \linethickness
    :PROPERTIES:
    :CUSTOM_ID: d2_linethickness
    :LatexCategory: command
    :END:

The =\linethickness{DIM}= command declares the thickness of horizontal and
vertical lines in a picture environment to be *DIM*, which must be a positive
length.

=\linethickness= does not affect the thickness of slanted lines, circles, or the
quarter circles drawn by =\oval=.

*** \thicklines
    :PROPERTIES:
    :CUSTOM_ID: d2_thicklines
    :LatexCategory: command
    :END:

The =\thicklines= command is an alternate line thickness for horizontal and vertical lines
in a picture environment; cf. see [[#d2_linethickness][\linethickness]] and
[[#d2_thinlines][\thinlines]].

*** \thinlines
    :PROPERTIES:
    :CUSTOM_ID: d2_thinlines
    :LatexCategory: command
    :END:

The =\thinlines= command is the default line thickness for horizontal and vertical lines
in a picture environment; cf. see [[#d2_linethickness][\linethickness]] and
[[#d2_thicklines][\thicklines]].

*** \multiput
    :PROPERTIES:
    :CUSTOM_ID: d2_multiput
    :LatexCategory: command
    :END:

Synopsis:
#+BEGIN_SRC latex
     \multiput(X,Y)(DELTA_X,DELTA_Y){N}{OBJ}
#+END_SRC

The =\multiput= command copies the object *OBJ* in a regular pattern across a
picture.  *OBJ* is first placed at position ~(x,y)~, then at ~(x+\delta
x,y+\delta y)~, and so on, ~N~ times.

*** \oval
    :PROPERTIES:
    :CUSTOM_ID: d2_oval
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \oval(WIDTH,HEIGHT)[PORTION]
#+END_SRC

The =\oval= command produces a rectangle with rounded corners.  The optional
argument *PORTION* allows you to select part of the oval via the following:

- 't' :: selects the top portion;
	 
- 'b' :: selects the bottom portion;
	 
- 'r' :: selects the right portion;
	 
- 'l' :: selects the left portion.

The "corners" of the oval are made with quarter circles with a maximum radius of
20pt, so large "ovals" will look more like boxes with rounded corners.

*** \put
    :PROPERTIES:
    :CUSTOM_ID: d2_put
    :LatexCategory: command
    :END:

#+BEGIN_SRC latex
    \put(x coord,y coord){ ... }
#+END_SRC
    
The =\put= command places the item specified by the mandatory argument at the
given coordinates.

*** \shortstack
    :PROPERTIES:
    :CUSTOM_ID: d2_shortstack
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \shortstack[POSITION]{...\\...\\...}
#+END_SRC

The =\shortstack= command produces a stack of objects.  The valid positions are:

- 'r' :: Move the objects to the right of the stack.
	 
- 'l' :: Move the objects to the left of the stack
	 
- 'c' :: Move the objects to the centre of the stack (default)

Objects are separated with ~\\~.

*** \vector
    :PROPERTIES:
    :CUSTOM_ID: d2_vector
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \vector(X-SLOPE,Y-SLOPE){LENGTH}
#+END_SRC

The =\vector= command draws a line with an arrow of the specified length and
slope.  The ~x~ and ~y~ values must lie between -4 and +4, inclusive.

** quotation
   :PROPERTIES:
   :CUSTOM_ID: d2_env_quotation
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{quotation}
     TEXT
     \end{quotation}
#+END_SRC

The margins of the ~quotation~ environment are indented on both the left and the
right.  The text is justified at both margins.  Leaving a blank line between
text produces a new paragraph.

Unlike the ~quote~ environment, each paragraph is indented normally.

** quote
   :PROPERTIES:
   :CUSTOM_ID: d2_env_quote
   :LatexCategory: environment
   :END:
   
Snyopsis:

#+BEGIN_SRC latex
     \begin{quote}
     TEXT
     \end{quote}
#+END_SRC

The margins of the ~quote~ environment are indented on both the left and the
right.  The text is justified at both margins.  Leaving a blank line between
text produces a new paragraph.

Unlike the ~quotation~ environment, paragraphs are not indented.

** tabbing
   :PROPERTIES:
   :CUSTOM_ID: d2_env_tabbing
   :LatexCategory: environment
   :END:
   
Synopsis:

#+BEGIN_SRC latex
     \begin{tabbing}
     ROW1COL1 \= ROW1COL2 \= ROW1COL3 \= ROW1COL4 \\
     ROW2COL1 \>                \> ROW2COL3 \\
     ...
     \end{tabbing}
#+END_SRC

The ~tabbing~ environment provides a way to align text in columns.  It works by
setting tab stops and tabbing to them much as was done on an ordinary
typewriter.  It is best suited for cases where the width of each column is
constant and known in advance.

This environment can be broken across pages, unlike the ~tabular~ environment.

The following commands can be used inside a ~tabbing~ enviroment:

- \\ (tabbing) :: End a line.

- \= (tabbing) :: Sets a tab stop at the current position.

- \> (tabbing) :: Advances to the next tab stop.

- \< :: Put following text to the left of the local margin (without changing the
        margin).  Can only be used at the start of the line.

- \+ :: Moves the left margin of the next and all the following commands one tab
        stop to the right, beginning tabbed line if necessary.

- \- :: Moves the left margin of the next and all the following commands one tab
        stop to the left, beginning tabbed line if necessary.

- \' (tabbing) :: Moves everything that you have typed so far in the current
                  column, i.e.  everything from the most recent ~\>~, ~\<~,
                  ~\'~, ~\\~, or =\kill= command, to the right of the previous
                  column, flush against the current column's tab stop.

- \` (tabbing) :: Allows you to put text flush right against any tab stop,
                  including tab stop 0.  However, it can't move text to the
                  right of the last column because there's no tab stop there.
                  The ~\`~ command moves all the text that follows it, up to the
                  ~\\~ or =\end{tabbing}= command that ends the line, to the
                  right margin of the tabbing environment.  There must be no
                  ~\>~ or ~\'~ command between the ~\`~ and the command that
                  ends the line.

- \a (tabbing) :: In a ~tabbing~ environment, the commands ~\=~, ~\'~ and ~\`~
                  do not produce accents as usual (*note Accents::).  Instead,
                  the commands ~\a=~, ~\a'~ and ~\a`~ are used.

- \kill :: Sets tab stops without producing text.  Works just like ~\\~ except
           that it throws away the current line instead of producing output for
           it.  The effect of any ~\=~, ~\+~ or ~\-~ commands in that line
           remain in effect.

- \poptabs :: Restores the tab stop positions saved by the last =\pushtabs=.

- \pushtabs :: Saves all current tab stop positions.  Useful for temporarily
               changing tab stop positions in the middle of a ~tabbing~
               environment.

- \tabbingsep :: Distance to left of tab stop moved by ~\'~.

This example typesets a Pascal function in a traditional format:

#+BEGIN_SRC latex
     \begin{tabbing}
     function \= fact(n : integer) : integer;\\
              \> begin \= \+ \\
                    \> if \= n $>$ 1 then \+ \\
                             fact := n * fact(n-1) \- \\
                       else \+ \\
                             fact := 1; \-\- \\
                 end;\\
     \end{tabbing}
#+END_SRC

** table
   :PROPERTIES:
   :CUSTOM_ID: d2_env_table
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
      \begin{table}[placement]

       body of the table

      \caption{table title}
      \end{table}
#+END_SRC

Tables are objects that are not part of the normal text, and are usually
"floated" to a convenient place, like the top of a page.  Tables will not be
split between two pages.

The optional argument ~[placement]~ determines where LaTeX will try to place
your table.  There are four places where LaTeX can possibly put a float; these
are the same as that used with the ~figure~ environment, and described there
(see [[#d2_env_figure][figure]]).

The standard ~report~ and ~article~ classes use the default placement ~[tbp]~.

The body of the table is made up of whatever text, LaTeX commands, etc., you
wish.  The =\caption= command allows you to title your table.

** tabular
   :PROPERTIES:
   :CUSTOM_ID: d2_env_tabular
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{tabular}[pos]{cols}
     column 1 entry & column 2 entry ... & column n entry \\
     ...
     \end{tabular}
#+END_SRC

or

#+BEGIN_SRC latex
     \begin{tabular*}{width}[pos]{cols}
     column 1 entry & column 2 entry ... & column n entry \\
     ...
     \end{tabular*}
#+END_SRC

These environments produce a box consisting of a sequence of rows of items,
aligned vertically in columns.

~\\~ must be used to specify the end of each row of the table, except for the
last, where it is optional--unless an =\hline= command (to put a rule below the
table) follows.

The mandatory and optional arguments consist of:

- ~width~ :: Specifies the width of the 'tabular*' environment.  There must be
             rubber space between columns that can stretch to fill out the
             specified width.

- ~pos~ :: Specifies the vertical position; default is alignment on the centre
           of the environment.

     * ~t~ :: align on top row

     * ~b~ :: align on bottom row

- ~cols~ :: Specifies the column formatting.  It consists of a sequence of the
            following specifiers, corresponding to the sequence of columns and
            intercolumn material.

     * ~l~ :: A column of left-aligned items.

     * ~r~ :: A column of right-aligned items.

     * ~c~ :: A column of centered items.

     * ~|~ :: A vertical line the full height and depth of the environment.

     * ~@{TEXT}~ :: This inserts TEXT in every row.  An @-expression suppresses
                    the intercolumn space normally inserted between columns; any
                    desired space before the adjacent item must be included in
                    TEXT.

		    To insert commands that are automatically executed before a
                    given column, you have to load the ~array~ package and use
                    the ~>{...}~ specifier.

		    An =\extracolsep{wd}= command in an @-expression causes an
                    extra space of width ~wd~ to appear to the left of all
                    subsequent columns, until countermanded by another
                    =\extracolsep= command.  Unlike ordinary intercolumn space,
                    this extra space is not suppressed by an @-expression.  An
                    =\extracolsep= command can be used only in an @-expression
                    in the ~cols~ argument.

     * ~p{WD}~ :: Produces a column with each item typeset in a parbox of width
                  WD, as if it were the argument of a =\parbox[t]{WD}= command.
                  However, a ~\\~ may not appear in the item, except in the
                  following situations:

            1. inside an environment like ~minipage~, ~array~, or ~tabular~.
	       
            2. inside an explicit =\parbox=.
	       
            3. in the scope of a =\centering=, =\raggedright=, or =\raggedleft=
               declaration.  The latter declarations must appear inside braces
               or an environment when used in a ~p~-column element.

     * ~*{NUM}{COLS}~ :: Equivalent to NUM copies of COLS, where NUM is a
                         positive integer and COLS is any list of
                         column-specifiers, which may contain another
                         ~*-expression~.

Parameters that control formatting:

*** \arrayrulewidth
    :PROPERTIES:
    :CUSTOM_ID: d2_arrayrulewidth
    :LatexCategory: parameter
    :END:

    Thickness of the rule created by ~|~, =\hline=, and =\vline= in the
    ~tabular~ and ~array~ environments; the default is ~.4pt~.

*** \arraystretch
    :PROPERTIES:
    :CUSTOM_ID: d2_arraystretch
    :LatexCategory: parameter
    :END:

    Scaling of spacing between rows in the ~tabular~ and ~array~ environments;
    default is 1, for no scaling.

*** \doublerulesep
    :PROPERTIES:
    :CUSTOM_ID: d2_doublerulesep
    :LatexCategory: parameter
    :END:

    Horizontal distance between the vertical rules produced by ~||~ in the
    ~tabular~ and ~array~ environments; default is ~2pt~.

*** \tabcolsep
    :PROPERTIES:
    :CUSTOM_ID: d2_tabcolsep
    :LatexCategory: parameter
    :END:

    Half the width of the space between columns; default is ~6pt~.

The following commands can be used inside a ~tabular~ environment:

*** \multicolumn
    :PROPERTIES:
    :CUSTOM_ID: d2_multicolumn
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \multicolumn{COLS}{POS}{TEXT}
#+END_SRC

The =\multicolumn= command makes an entry that spans several columns.  The first
mandatory argument, COLS, specifies the number of columns to span.  The second
mandatory argument, POS, specifies the formatting of the entry; ~c~ for
centered, ~l~ for flushleft, ~r~ for flushright.  The third mandatory argument,
TEXT, specifies what text to put in the entry.

Here's an example showing two columns separated by an en-dash; =\multicolumn= is
used for the heading:

#+BEGIN_SRC latex
     \begin{tabular}{r@{--}l}
     \multicolumn{2}{c}{\bf Unicode}\cr
        0x80&0x7FF   \cr
       0x800&0xFFFF  \cr
     0x10000&0x1FFFF \cr
     \end{tabular}
#+END_SRC

*** \cline
    :PROPERTIES:
    :CUSTOM_ID: d2_cline
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \cline{I-J}
#+END_SRC

The =\cline= command draws horizontal lines across the columns specified,
beginning in column ~I~ and ending in column ~J~, which are specified in the
mandatory argument.

*** \hline
    :PROPERTIES:
    :CUSTOM_ID: d2_hline
    :LatexCategory: command
    :END:

The =\hline= command draws a horizontal line the width of the enclosing
~tabular~ or ~array~ environment.  It's most commonly used to draw a line at the
top, bottom, and between the rows of a table.

*** \vline
    :PROPERTIES:
    :CUSTOM_ID: d2_vline
    :LatexCategory: command
    :END:

The =\vline= command will draw a vertical line extending the full height and
depth of its row.  An =\hfill= command can be used to move the line to the edge
of the column.  It can also be used in an @-expression.

** thebibliography
   :PROPERTIES:
   :CUSTOM_ID: d2_env_thebibliography
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{thebibliography}{WIDEST-LABEL}
     \bibitem[LABEL]{CITE_KEY}
     ...
     \end{thebibliography}
#+END_SRC

The ~thebibliography~ environment produces a bibliography or reference list.

In the ~article~ class, this reference list is labelled "References"; in the
~report~ class, it is labelled "Bibliography".  You can change the label (in the
standard classes) by redefining the command =\refname=.  For instance, this
eliminates it entirely:

#+BEGIN_SRC latex
     \renewcommand{\refname}{}
#+END_SRC

The mandatory *WIDEST-LABEL* argument is text that, when typeset, is as wide as
the widest item label produced by the =\bibitem= commands.  It is typically
given as 9 for bibliographies with less than 10 references, 99 for ones with
less than 100, etc.

*** \bibitem
    :PROPERTIES:
    :CUSTOM_ID: d2_bibitem
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \bibitem[LABEL]{CITE_KEY}
#+END_SRC

The =\bibitem= command generates an entry labelled by *LABEL*.  If the *LABEL*
argument is missing, a number is automatically generated using the ~enumi~
counter.  The *CITE_KEY* is any sequence of letters, numbers, and punctuation
symbols not containing a comma.

This command writes an entry to the ~.aux~ file containing the item's *CITE_KEY* and
label.  When the ~.aux~ file is read by the =\begin{document}= command, the item's ~label~
is associated with ~cite_key~, causing references to CITE_KEY with a =\cite= command (see
[[#d2_cite][next section]]) to produce the associated label.

*** \cite
    :PROPERTIES:
    :CUSTOM_ID: d2_cite
    :LatexCategory: command
    :END:

Synopsis:

#+BEGIN_SRC latex
     \cite[SUBCITE]{KEYS
#+END_SRC

The *KEYS* argument is a list of one or more citation keys, separated by commas.
This command generates an in-text citation to the references associated
with *KEYS* by entries in the ~.aux~ file.

The text of the optional *SUBCITE* argument appears after the citation.  For
example, =\cite[p.~314]{knuth}= might produce ~[Knuth, p. 314]~.

*** \nocite
    :PROPERTIES:
    :CUSTOM_ID: d2_nocite
    :LatexCategory: command
    :END:
    
#+BEGIN_SRC latex
    \nocite{key_list}
#+END_SRC

The =\nocite= command produces no text, but writes ~key_list~, which is a list
of one or more citation keys, on the ~.aux~ file.

*** Using BibTeX

If you use the BibTeX program by Oren Patashnik (highly recommended if you need a
bibliography of more than a couple of titles) to maintain your bibliography, you don't use
the ~thebibliography~ environment (see [[#d2_env_thebibliography][thebibliography]]).
Instead, you include the lines

#+BEGIN_SRC latex
     \bibliographystyle{BIBSTYLE}
     \bibliography{BIBFILE1,BIBFILE2}
#+END_SRC

The =\bibliographystyle= command does not produce any output of its own.
Rather, it defines the style in which the bibliography will be
produced: *BIBSTYLE* refers to a file *BIBSTYLE.bst*, which defines how your
citations will look.  The standard *STYLE* names distributed with BibTeX are:

- ~alpha~ :: Sorted alphabetically.  Labels are formed from name of author and
             year of publication.
	     
- ~plain~ :: Sorted alphabetically.  Labels are numeric.
	     
- ~unsrt~ :: Like ~plain~, but entries are in order of citation.
	     
- ~abbrv~ :: Like ~plain~, but more compact labels.

In addition, numerous other BibTeX style files exist tailored to the demands of
various publications.  See http://www.ctan.org/tex-archive/biblio/bibtex/contrib.

The =\bibliography= command is what actually produces the bibliography.  The
argument to =\bibliography= refers to files named *BIBFILE.bib*, which should
contain your database in BibTeX format.  Only the entries referred to via
=\cite= and =\nocite= will be listed in the bibliography.

** theorem
   :PROPERTIES:
   :CUSTOM_ID: d2_env_theorem
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{theorem}
     THEOREM-TEXT
     \end{theorem}
#+END_SRC

The ~theorem~ environment produces "Theorem N" in boldface followed
by *THEOREM-TEXT*, where the numbering possibilities for N are described under
=\newtheorem= (see [[#d2_newtheorem][\newtheorem]]).

** titlepage
   :PROPERTIES:
   :CUSTOM_ID: d2_env_titlepage
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{titlepage}
     TEXT
     \end{titlepage}
#+END_SRC

The ~titlepage~ environment creates a title page, i.e., a page with no printed
page number or heading.  It also causes the following page to be numbered page
one.  Formatting the title page is left to you.  The =\today= command may be
useful on title pages (see [[#d2_today][\today]]).

You can use the =\maketitle= command (see [[#d2_maketitle][\maketitle]]) to produce a
standard title page without a ~titlepage~ environment.

** verbatim
   :PROPERTIES:
   :CUSTOM_ID: d2_env_verbatim
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{verbatim}
     LITERAL-TEXT
     \end{verbatim}
#+END_SRC

The ~verbatim~ environment is a paragraph-making environment in which LaTeX
produces exactly what you type in; for instance the ~\~ character produces a
printed ~\~.  It turns LaTeX into a typewriter with carriage returns and blanks
having the same effect that they would on a typewriter.

The ~verbatim~ uses a monospaced typewriter-like font (=\tt=).

*** \verb
   :PROPERTIES:
   :CUSTOM_ID: d2_verb
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \verbCHARLITERAL-TEXTCHAR
     \verb*CHARLITERAL-TEXTCHAR
#+END_SRC

The =\verb= command typesets *LITERAL-TEXT* as it is input, including special
characters and spaces, using the typewriter (=\tt=) font.  No spaces are allowed
between =\verb= or =\verb*= and the delimiter *CHAR*, which begins and ends the
verbatim text.  The delimiter must not appear in *LITERAL-TEXT*.

The ~*~-form differs only in that spaces are printed with a "visible space"
character.

** verse
   :PROPERTIES:
   :CUSTOM_ID: d2_env_verse
   :LatexCategory: environment
   :END:

Synopsis:

#+BEGIN_SRC latex
     \begin{verse}
     LINE1 \\
     LINE2 \\
     ...
     \end{verse}
#+END_SRC

The ~verse~ environment is designed for poetry, though you may find other uses
for it.

The margins are indented on the left and the right, paragraphs are not indented,
and the text is not justified.  Separate the lines of each stanza with =\\=, and
use one or more blank lines to separate the stanzas.

* Line breaking

The first thing LaTeX does when processing ordinary text is to translate your
input file into a sequence of glyphs and spaces.  To produce a printed document,
this sequence must be broken into lines (and these lines must be broken into
pages).

LaTeX usually does the line (and page) breaking for you, but in some
environments, you do the line breaking yourself with the =\\= command, and you
can always manually force breaks.

** \\[*][MORESPACE]
   :PROPERTIES:
   :LatexCategory: command
   :END:

The =\\= command tells LaTeX to start a new line.  It has an optional argument,
MORESPACE, that specifies how much extra vertical space is to be inserted before
the next line.  This can be a negative amount.

The =\\*= command is the same as the ordinary =\\= command except that it tells
LaTeX not to start a new page after the line.

** \obeycr & \restorecr
   :PROPERTIES:
   :CUSTOM_ID: d2_obeycr_restorecr
   :LatexCategory: command
   :END:

The =\obeycr= command makes a return in the input file (~^^M~, internally) the
same as =\\= (followed by =\relax=).  So each new line in the input will also be
a new line in the output.

=\restorecr= restores normal line-breaking behavior.

** \newline
   :PROPERTIES:
   :CUSTOM_ID: d2_newline
   :LatexCategory: command
   :END:

The =\newline= command breaks the line at the present point, with no stretching
of the text before it.  It can only be used in paragraph mode.

** \- (discretionary hyphen)
   :PROPERTIES:
   :LatexCategory: command
   :END:

The =\-= command tells LaTeX that it may hyphenate the word at that point.
LaTeX is very good at hyphenating, and it will usually find most of the correct
hyphenation points, and almost never use an incorrect one.  The =\-= command is
used for the exceptional cases.

When you insert =\-= commands in a word, the word will only be hyphenated at
those points and not at any of the hyphenation points that LaTeX might otherwise
have chosen.

** \fussy
   :PROPERTIES:
   :CUSTOM_ID: d2_fussy
   :LatexCategory: command
   :END:

The declaration =\fussy= (which is the default) makes TeX picky about line
breaking.  This usually avoids too much space between words, at the cost of an
occasional overfull box.

This command cancels the effect of a previous =\sloppy= command (see
[[#d2_sloppy][\sloppy]]).

** \sloppy
   :PROPERTIES:
   :CUSTOM_ID: d2_sloppy
   :LatexCategory: command
   :END:

The declaration =\sloppy= makes TeX less fussy about line breaking.  This will
avoid overfull boxes, at the cost of loose interword spacing.

Lasts until a =\fussy= command is issued (see [[#d2_fussy][\fussy]]).

** \hyphenation
   :PROPERTIES:
   :CUSTOM_ID: d2_hyphenation
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \hyphenation{WORD-ONE WORD-TWO}
#+END_SRC

The =\hyphenation= command declares allowed hyphenation points with a '-'
character in the given words.  The words are separated by spaces.  TeX will only
hyphenate if the word matches exactly, no inflections are tried.  Multiple
=\hyphenation= commands accumulate.  Some examples (the default TeX hyphenation
patterns misses the hyphenations in these words):

#+BEGIN_SRC latex
     \hyphenation{ap-pen-dix col-umns data-base data-bases}
#+END_SRC

** \linebreak & \nolinebreak
   :PROPERTIES:
   :CUSTOM_ID: d2_linebreak_nolinebreak
   :LatexCategory: command
   :END:

Synopses:

#+BEGIN_SRC latex
     \linebreak[PRIORITY]
     \nolinebreak[PRIORITY]
#+END_SRC

By default, the =\linebreak= (=\nolinebreak=) command forces (prevents) a line
break at the current position.  For =\linebreak=, the spaces in the line are
stretched out so that it extends to the right margin as usual.

With the optional argument *PRIORITY*, you can convert the command from a demand
to a request.  The *PRIORITY* must be a number from 0 to 4.  The higher the
number, the more insistent the request.

* Page breaking

LaTeX starts new pages asynchronously, when enough material has
accumulated to fill up a page.  Usually this happens automatically, but
sometimes you may want to influence the breaks.

** \cleardoublepage
   :PROPERTIES:
   :CUSTOM_ID: d2_cleardoublepage
   :LatexCategory: command
   :END:

The =\cleardoublepage= command ends the current page and causes all figures and
tables that have so far appeared in the input to be printed.  In a two-sided
printing style, it also makes the next page a right-hand (odd-numbered) page,
producing a blank page if necessary.

** \clearpage
   :PROPERTIES:
   :CUSTOM_ID: d2_clearpage
   :LatexCategory: command
   :END:

The =\clearpage= command ends the current page and causes all figures and tables
that have so far appeared in the input to be printed.

** \newpage
   :PROPERTIES:
   :CUSTOM_ID: d2_newpage
   :LatexCategory: command
   :END:

The =\newpage= command ends the current page, but does not clear floats (see
\clearpage above).

** \enlargethispage
   :PROPERTIES:
   :CUSTOM_ID: d2_enlargethispage
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \enlargethispage{size}
   \enlargethispage*{size}
#+END_SRC

Enlarge the =\textheight= for the current page by the specified amount; e.g.
=\enlargethispage{\baselineskip}= will allow one additional line.

The starred form tries to squeeze the material together on the page as much as
possible.  This is normally used together with an explicit =\pagebreak=.

** \pagebreak & \nopagebreak
   :PROPERTIES:
   :CUSTOM_ID: d2_pagebreak_nopagebreak
   :LatexCategory: command
   :END:

Synopses:

#+BEGIN_SRC latex
     \pagebreak[PRIORITY]
     \nopagebreak[PRIORITY]
#+END_SRC

By default, the =\pagebreak= (=\nopagebreak=) command forces (prevents) a page
break at the current position.  With =\pagebreak=, the vertical space on the
page is stretched out where possible so that it extends to the normal bottom
margin.

With the optional argument *PRIORITY*, you can convert the =\pagebreak= command
from a demand to a request.  The number must be a number from 0 to 4.  The
higher the number, the more insistent the request is.

* Footnotes

Footnotes can be produced in one of two ways.  They can be produced with one
command, the =\footnote= command.  They can also be produced with two commands,
the =\footnotemark= and the =\footnotetext= commands.

** \footnote
   :PROPERTIES:
   :CUSTOM_ID: d2_footnote
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \footnote[NUMBER]{TEXT}
#+END_SRC

The =\footnote= command places the numbered footnote *TEXT* at the bottom of the
current page.  The optional argument *NUMBER* changes the default footnote
number.

This command can only be used in outer paragraph mode; i.e., you cannot use it
in sectioning commands like =\chapter=, in figures, tables or in a ~tabular~
environment.  (See following sections.)

** \footnotemark
   :PROPERTIES:
   :CUSTOM_ID: d2_footnotemark
   :LatexCategory: command
   :END:

With no optional argument, the =\footnotemark= command puts the current footnote
number in the text.  This command can be used in inner paragraph mode.  You give
the text of the footnote separately, with the =\footnotetext= command.

This command can be used to produce several consecutive footnote markers
referring to the same footnote with

#+BEGIN_SRC latex
     \footnotemark[\value{footnote}]
#+END_SRC

after the first =\footnote= command.

** \footnotetext
   :PROPERTIES:
   :CUSTOM_ID: d2_footnotetext
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \footnotetext[NUMBER]{TEXT}
#+END_SRC

The =\footnotetext= command places *TEXT* at the bottom of the page as a
footnote.  This command can come anywhere after the =\footnotemark= command.
The =\footnotetext= command must appear in outer paragraph mode.

The optional argument *NUMBER* changes the default footnote number.

** Symbolic footnotes

If you want to use symbols for footnotes, rather than increasing numbers,
redefine =\thefootnote= like this:

#+BEGIN_SRC latex
     \renewcommand{\thefootnote}{\fnsymbol{footnote}}
#+END_SRC

The =\fnsymbol= command produces a predefined series of symbols (see [[#d2_alph][\alph]] [[#d2_Alph][\Alph]]
[[#d2_arabic][\arabic]] [[#d2_roman][\roman]] [[#d2_Roman][\Roman]] [[#d2_fnsymbol][\fnsymbol]]).  If you want to use a different symbol as your
footnote mark, you'll need to also redefine =\@fnsymbol=.

** Footnote parameters

*** \footnoterule
   :PROPERTIES:
   :CUSTOM_ID: d2_footnoterule
   :LatexCategory: parameter
   :END:

    Produces the rule separating the main text on a page from the page's
    footnotes.  Default dimensions: ~0.4pt~ thick (or wide), and
    ~0.4\columnwidth~ long in the standard document classes (except slides,
    where it does not appear).

*** \footnotesep
    :PROPERTIES:
    :CUSTOM_ID: d2_footnotesep
    :LatexCategory: parameter
    :END:

    The height of the strut placed at the beginning of the footnote.  By
    default, this is set to the normal strut for =\footnotesize= fonts (see [[#d2_sec_fontSizes][Font
    sizes]]), therefore there is no extra space between footnotes.  This is
    ~6.65pt~ for ~10pt~, ~7.7pt~ for ~11pt~, and ~8.4pt~ for ~12pt~.

* Definitions

LaTeX has support for making new commands of many different kinds.

** \newcommand & \renewcommand
   :PROPERTIES:
   :CUSTOM_ID: d2_newcommand_renewcommand
   :LatexCategory: command
   :END:

=\newcommand= and =\renewcommand= define and redefine a command, respectively.
Synopses:

#+BEGIN_SRC latex
     \newcommand{CMD}[NARGS]{DEFN}
     \renewcommand{CMD}[NARGS]{DEFN}
     \newcommand{CMD}[NARGS][DEFAULT]{DEFN}
     \renewcommand{CMD}[NARGS][DEFAULT]{DEFN}
#+END_SRC

- CMD :: The command name beginning with =\=.  For =\newcommand=, it must not be
         already defined and must not begin with =\end=; for =\renewcommand=, it
         must already be defined.

- NARGS :: An optional integer from 1 to 9 specifying the number of arguments
           that the command will take.  The default is for the command to have
           no arguments.

- DEFAULT :: If this optional parameter is present, it means that the command's
             first argument is optional.  When the new command is called, the
             default value of the optional argument (i.e., if it is not
             specified in the call) is the string 'def'.

- DEFN :: The text to be substituted for every occurrence of *cmd*; a construct
          of the form ~#N~ in *DEFN* is replaced by the text of the Nth
          argument.

** \newcounter
   :PROPERTIES:
   :CUSTOM_ID: d2_newcounter
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \newcounter{CNT}[COUNTERNAME]
#+END_SRC

The =\newcounter= command defines a new counter named *CNT*.  The new counter is
initialized to zero.

Given the optional argument *[COUNTERNAME]*, *CNT* will be reset
whenever *COUNTERNAME* is incremented.

See [[#d2_chap_counters][Counters]], for more information about counters.

** \newlength
   :PROPERTIES:
   :CUSTOM_ID: d2_newlength
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \newlength{\ARG}
#+END_SRC

The =\newlength= command defines the mandatory argument as a ~length~ command
with a value of ~0in~.  The argument must be a control sequence, as in
=\newlength{\foo}=.  An error occurs if =\foo= is already defined.

See [[#d2_chap_lengths][Lengths]], for how to set the new length to a nonzero value, and for more
information about lengths in general.

** \newsavebox
   :PROPERTIES:
   :CUSTOM_ID: d2_newsavebox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \newsavebox{CMD}
#+END_SRC

Defines =\CMD=, which must be a command name not already defined, to refer to a
new bin for storing boxes.

** \newenvironment & \renewenvironment
   :PROPERTIES:
   :CUSTOM_ID: d2_newenvironment_renewenvironment
   :LatexCategory: command
   :END:

Synopses:

#+BEGIN_SRC latex
     \newenvironment{ENV}[NARGS]{BEGDEF}{ENDDEF}
     \newenvironment{ENV}[NARGS][DEFAULT]{BEGDEF}{ENDDEF}
     \renewenvironment{ENV}[NARGS]{BEGDEF}{ENDDEF}
#+END_SRC

These commands define or redefine an environment ENV, that is,
=\begin{ENV} ... \end{ENV}=.

- ENV :: The name of the environment.  For =\newenvironment=, *ENV* must not be
         an existing environment, and the command =\ENV= must be undefined.  For
         =\renewenvironment=, *ENV* must be the name of an existing environment.

- NARGS :: An integer from 1 to 9 denoting the number of arguments of the
           newly-defined environment.  The default is no arguments.

- DEFAULT :: If this is specified, the first argument is optional, and *DEFAULT*
             gives the default value for that argument.

- BEGDEF :: The text expanded at every occurrence of =\begin{ENV}=; a construct
            of the form ~#N~ in *BEGDEF* is replaced by the text of the Nth
            argument.

- ENDDEF :: The text expanded at every occurrence of =\end{ENV}=.  It may not
            contain any argument parameters.

** \newtheorem
   :PROPERTIES:
   :CUSTOM_ID: d2_newtheorem
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
     \newtheorem{NEWENV}{LABEL}[WITHIN]
     \newtheorem{NEWENV}[NUMBERED_LIKE]{LABEL}
#+END_SRC

This command defines a theorem-like environment.  Arguments:

- NEWENV :: The name of the environment to be defined; must not be the name of
            an existing environment or otherwise defined.

- LABEL :: The text printed at the beginning of the environment, before the
           number.  For example, ~Theorem~.

- NUMBERED_LIKE :: (Optional.)  The name of an already defined theorem-like
                   environment; the new environment will be numbered just like
                   *NUMBERED_LIKE*.

- WITHIN :: (Optional.)  The name of an already defined counter, a sectional
            unit.  The new theorem counter will be reset at the same time as the
            *WITHIN counter*.

At most one of *NUMBERED_LIKE* and *WITHIN* can be specified, not both.

** \newfont
   :PROPERTIES:
   :CUSTOM_ID: d2_newfont
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \newfont{CMD}{FONTNAME}
#+END_SRC

Defines a control sequence =\CMD=, which must not already be defined, to
make *FONTNAME* be the current font.  The file looked for on the system is
named *FONTNAME.tfm*.

This is a low-level command for setting up to use an individual font.  More
commonly, fonts are defined in families through ~.fd~ files.

** \protect
   :PROPERTIES:
   :CUSTOM_ID: d2_protect
   :LatexCategory: command
   :END:

Footnotes, line breaks, any command that has an optional argument, and many more
are so-called "fragile" commands.  When a fragile command is used in certain
contexts, called "moving arguments", it must be preceded by =\protect=.  In
addition, any fragile commands within the arguments must have their own
=\protect=.

Some examples of moving arguments are =\caption= (see [[#d2_env_figure][figure]]), =\thanks= (see
[[#d2_maketitle][\maketitle]]), and expressions in ~tabular~ and ~array~ environments (see
[[#d2_env_tabular][tabular]]).

Commands which are not fragile are called "robust".  They must not be preceded
by =\protect=.

See also:

http://www-h.eng.cam.ac.uk/help/tpl/textprocessing/teTeX/latex/latex2e-html/fragile.html
http://www.tex.ac.uk/cgi-bin/texfaq2html?label=protect

* Counters
  :PROPERTIES:
  :CUSTOM_ID: d2_chap_counters
  :END:

Everything LaTeX numbers for you has a counter associated with it.  The name of
the counter is the same as the name of the environment or command that produces
the number, except with no ~\~.  (~enumi~-~enumiv~ are used for the nested
enumerate environment.)  Below is a list of the counters used in LaTeX's
standard document classes to control numbering.

     part            paragraph       figure          enumi
     chapter         subparagraph    table           enumii
     section         page            footnote        enumiii
     subsection      equation        mpfootnote      enumiv
     subsubsection

** \alph \Alph \arabic \roman \Roman \fnsymbol: Printing counters
   :PROPERTIES:
   :CUSTOM_ID: d2_printingCounters
   :LatexCategory: command
   :END:

All of these commands take a single counter as an argument, for instance,
=\alph{enumi}=.

*** \alph
   :PROPERTIES:
   :CUSTOM_ID: d2_alph
   :LatexCategory: command
   :END:

prints COUNTER using lowercase letters: ~a~, ~b~, ...

*** \Alph
   :PROPERTIES:
   :CUSTOM_ID: d2_Alph
   :LatexCategory: command
   :END:

uses uppercase letters: ~A~, ~B~, ...

*** \arabic
   :PROPERTIES:
   :CUSTOM_ID: d2_arabic
   :LatexCategory: command
   :END:

uses Arabic numbers: ~1~, ~2~, ...

*** \roman
   :PROPERTIES:
   :CUSTOM_ID: d2_roman
   :LatexCategory: command
   :END:

uses lowercase roman numerals: ~i~, ~ii~, ...

*** \roman
   :PROPERTIES:
   :CUSTOM_ID: d2_roman
   :LatexCategory: command
   :END:

uses uppercase roman numerals: ~I~, ~II~, ...

*** \fnsymbol
   :PROPERTIES:
   :CUSTOM_ID: d2_fnsymbol
   :LatexCategory: command
   :END:

prints the value of *COUNTER* in a specific sequence of nine symbols
(conventionally used for labeling footnotes).  The value of *COUNTER* must be
between 1 and 9, inclusive.

The symbols mostly aren't supported in Info, but here are the names:

    asterix(~*~) dagger ddagger section-sign paragraph-sign parallel
    double-asterix(~**~) double-dagger double-ddagger

** \usecounter{COUNTER}
   :PROPERTIES:
   :CUSTOM_ID: d2_usecounter
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \usecounter{COUNTER}
#+END_SRC

The =\usecounter= command is used in the second argument of the ~list~
environment to specify *COUNTER* to be used to number the list items.

** \value{COUNTER}
   :PROPERTIES:
   :CUSTOM_ID: d2_value
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \value{COUNTER}
#+END_SRC

The =\value= command produces the value of *COUNTER*.  It can be used anywhere
LaTeX expects a number, for example:

#+BEGIN_SRC latex
     \setcounter{myctr}{3}
     \addtocounter{myctr}{1}
     \hspace{\value{myctr}\parindent}
#+END_SRC

** \setcounter{COUNTER}{VALUE}
   :PROPERTIES:
   :CUSTOM_ID: d2_setcounter
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \setcounter{\COUNTER}{VALUE}
#+END_SRC

The =\setcounter= command sets the value of =\COUNTER= to the *VALUE* argument.

** \addtocounter{COUNTER}{VALUE}
   :PROPERTIES:
   :CUSTOM_ID: d2_addtocounter
   :LatexCategory: command
   :END:

The =\addtocounter= command increments *COUNTER* by the amount specified by
the *VALUE* argument, which may be negative.

** \refstepcounter{COUNTER}
   :PROPERTIES:
   :CUSTOM_ID: d2_refstepcounter
   :LatexCategory: command
   :END:

The =\refstepcounter= command works in the same way as =\stepcounter= See
[[#d2_stepcounter][\stepcounter]], except it also defines the current =\ref= value to be the result
of =\thecounter=.

** \stepcounter{COUNTER}
   :PROPERTIES:
   :CUSTOM_ID: d2_stepcounter
   :LatexCategory: command
   :END:

The =\stepcounter= command adds one to *COUNTER* and resets all subsidiary
counters.

** \day \month \year: Predefined counters			    :counter:
   :PROPERTIES:
   :CUSTOM_ID: d2_predefinedCounters
   :LatexCategory: parameter
   :END:

LaTeX defines counters for the day of the month (=\day=, 1-31), month of the
year (=\month=, 1-12), and year (=\year=, Common Era).  When TeX starts up, they
are set to the current values on the system where TeX is running.  They are not
updated as the job progresses.

The related command =\today= produces a string representing the current day
(see [[#d2_today][\today]]).

* Lengths
   :PROPERTIES:
   :CUSTOM_ID: d2_chap_lengths
   :END:

A ~length~ is a measure of distance.  Many LaTeX commands take a length as an
argument.

** \setlength{\LEN}{VALUE}
   :PROPERTIES:
   :CUSTOM_ID: d2_setlength
   :LatexCategory: command
   :END:

The =\setlength= sets the value of =\LEN= to the *VALUE* argument, which can be
expressed in any units that LaTeX understands, i.e., inches (~in~), millimeters
(~mm~), points (~pt~), big points (~bp~), etc.

** \addtolength{\LEN}{AMOUNT}
   :PROPERTIES:
   :CUSTOM_ID: d2_addtolength
   :LatexCategory: command
   :END:

The =\addtolength= command increments a "length command" =\LEN= by the amount
specified in the *AMOUNT* argument, which may be negative.

** \settodepth
   :PROPERTIES:
   :CUSTOM_ID: d2_settodepth
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \settodepth{\gnat}{text}
#+END_SRC

The =\settodepth= command sets the value of a ~length~ command equal to the
depth of the ~text~ argument.

** \settoheight
   :PROPERTIES:
   :CUSTOM_ID: d2_settoheight
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \settoheight{\gnat}{text}
#+END_SRC

The =\settoheight= command sets the value of a ~length~ command equal to the
height of the ~text~ argument.

** \settowidth{\LEN}{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_settowidth
   :LatexCategory: command
   :END:

The =\settowidth= command sets the value of the command =\LEN= to the width of
the *TEXT* argument.

** Predefined lengths						     :length:
   :PROPERTIES:
   :CUSTOM_ID: d2_predefinedLengths
   :END:

*** \width
   :PROPERTIES:
   :CUSTOM_ID: d2_width
   :LatexCategory: parameter
   :END:

*** \height
   :PROPERTIES:
   :CUSTOM_ID: d2_height
   :LatexCategory: parameter
   :END:

*** \depth
   :PROPERTIES:
   :CUSTOM_ID: d2_depth
   :LatexCategory: parameter
   :END:

*** \totalheight
   :PROPERTIES:
   :CUSTOM_ID: d2_totalheight
   :LatexCategory: parameter
   :END:

These length parameters can be used in the arguments of the box-making commands
(see [[#d2_chap_boxes][Boxes]]).  They specify the natural width, etc., of the text in the box.
=\totalheight= equals =\height= + =\depth=.  To make a box with the text
stretched to double the natural size, e.g., say

#+BEGIN_SRC latex
   \makebox[2\width]{Get a stretcher}
#+END_SRC

* Making paragraphs

A paragraph is ended by one or more completely blank lines--lines not containing
even a ~%~.  A blank line should not appear where a new paragraph cannot be
started, such as in math mode or in the argument of a sectioning command.

** \indent
   :PROPERTIES:
   :CUSTOM_ID: d2_indent
   :LatexCategory: command
   :END:

=\indent= produces a horizontal space whose width equals the width of the
=\parindent= length, the normal paragraph indentation.  It is used to add
paragraph indentation where it would otherwise be suppressed.

The default value for =\parindent= is ~1em~ in two-column mode, otherwise ~15pt~
for ~10pt~ documents, ~17pt~ for ~11pt~, and ~1.5em~ for ~12pt~.

** \noindent
   :PROPERTIES:
   :CUSTOM_ID: d2_noindent
   :LatexCategory: command
   :END:

When used at the beginning of the paragraph, =\noindent= suppresses any
paragraph indentation.  It has no effect when used in the middle of a paragraph.

** \parskip
   :PROPERTIES:
   :CUSTOM_ID: d2_parskip
   :LatexCategory: command
   :END:

=\parskip= is a rubber length defining extra vertical space added before each
paragraph.  The default is ~0pt plus1pt~.

** Marginal notes

Synopsis:

#+BEGIN_SRC latex
     \marginpar[LEFT]{RIGHT}
#+END_SRC

The =\marginpar= command creates a note in the margin.  The first line of the
note will have the same baseline as the line in the text where the =\marginpar=
occurs.

When you only specify the mandatory argument *RIGHT*, the text will be placed

   * in the right margin for one-sided layout;
   * in the outside margin for two-sided layout;
   * in the nearest margin for two-column layout.

The command =\reversemarginpar= places subsequent marginal notes in the opposite
(inside) margin.  =\normalmarginpar= places them in the default position.

When you specify both arguments, *LEFT* is used for the left margin, and *RIGHT*
is used for the right margin.

The first word will normally not be hyphenated; you can enable hyphenation there
by beginning the node with =\hspace{0pt}=.

These parameters affect the formatting of the note:

*** \marginparpush
   :PROPERTIES:
   :CUSTOM_ID: d2_marginparpush
   :LatexCategory: parameter
   :END:

    Minimum vertical space between notes; default ~7pt~ for ~12pt~ documents,
    ~5pt~ else.

*** \marginparsep
   :PROPERTIES:
   :CUSTOM_ID: d2_marginparsep
   :LatexCategory: parameter
   :END:

    Horizontal space between the main text and the note; default ~11pt~ for
    ~10pt~ documents, ~10pt~ else.

*** \marginparwidth
   :PROPERTIES:
   :CUSTOM_ID: d2_marginparwidth
   :LatexCategory: parameter
   :END:

    Width of the note itself; default for a one-sided ~10pt~ document is ~90pt~,
    ~83pt~ for ~11pt~, and ~68pt~ for ~12pt~; ~17pt~ more in each case for a
    two-sided document.  In two column mode, the default is ~48pt~.

    The standard LaTeX routine for marginal notes does not prevent notes from
    falling off the bottom of the page.

* Math formulas
  :PROPERTIES:
  :CUSTOM_ID: d2_chap_mathFormulas
  :END:

There are three environments that put LaTeX in math mode:

- ~math~ :: For formulas that appear right in the text.
	    
- ~displaymath~ :: For formulas that appear on their own line.
		   
- ~equation~ :: The same as the displaymath environment except that it adds an
                equation number in the right margin.

The ~math~ environment can be used in both paragraph and LR mode, but the
~displaymath~ and ~equation~ environments can be used only in paragraph mode.
The ~math~ and ~displaymath~ environments are used so often that they have the
following short forms:

     =\(...\)=   instead of   =\begin{math}...\end{math}=
     =\[...\]=   instead of   =\begin{displaymath}...\end{displaymath}=

In fact, the ~math~ environment is so common that it has an even shorter form:

     =$ ... $=   instead of   =\(...\)=

The ~\boldmath~ command changes math letters and symbols to be in a bold font.
It is used _outside_ of math mode.  Conversely, the =\unboldmath= command
changes math glyphs to be in a normal font; it too is used _outside_ of math
mode.

The =\displaystyle= declaration forces the size and style of the formula to be
that of ~displaymath~, e.g., with limits above and below summations.  For
example =$\displaystyle \sum_{n=0}^\infty x_n $=

** Subscripts & superscripts

To get an expression exp to appear as a subscript, you just type =_{'exp'}=.  To
get exp to appear as a superscript, you type =^{'exp'}=.  LaTeX handles
superscripted superscripts and all of that stuff in the natural way.  It even
does the right thing when something has both a subscript and a superscript.

** Math symbols							:math:symbol:

LaTeX provides almost any mathematical symbol you're likely to need.  The
commands for generating them can be used only in math mode.  For example, if you
include =$\pi$= in your source, you will get the pi symbol (=\pi=) in your
output.

*** Greek Uppercase
    :PROPERTIES:
    :LatexCategory: command
    :END:

**** Γ \Gamma
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** Δ \Delta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Θ \Theta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Λ \Lambda
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Ξ \Xi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Π \Pi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Σ \Sigma
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ϒ \Upsilon
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Φ \Phi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Ψ \Psi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** Ω \Omega
     :PROPERTIES:
     :LatexCategory: command
     :END:

*** Greek Lowercase
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
**** α \alpha
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** β \beta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** γ \gamma
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** δ \delta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ϵ \epsilon
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ζ \zeta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** η \eta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** θ \theta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ι \iota
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** κ \kappa
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** λ \lambda
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** μ \mu
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ν \nu
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ξ \xi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** π \pi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ρ \rho
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** σ \sigma
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** τ \tau
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** υ \upsilon
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ϕ \phi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** χ \chi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ψ \psi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ω \omega
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ε \varepsilon
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ϑ \vartheta
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ϖ \varpi
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ϱ \varrho
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ς \varsigma
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** φ \varphi
     :PROPERTIES:
     :LatexCategory: command
     :END:

*** Binary Operators
    :PROPERTIES:
    :LatexCategory: command
    :END:

**** ± \pm
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∓ \mp
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** × \times
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ÷ \div
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∗ \ast
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⋆ \star
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∘ \circ
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∙ \bullet
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⋅ \cdot
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∩ \cap
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∪ \cup
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⊎ \uplus
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⊓ \sqcap
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∨ \vee
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∧ \wedge
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∖ \setminus
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ≀ \wr
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⋄ \diamond
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** △ \bigtriangleup
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ▽ \bigtriangledown
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ◁ \triangleleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ▷ \triangleright
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** \lhd
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** \rhd
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** \unlhd
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** \unrhd
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⊕ \oplus
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⊖ \ominus
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⊗ \otimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ∅ \oslash
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⊙ \odot
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ○ \bigcirc
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** † \dagger
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ‡ \ddagger
     :PROPERTIES:
     :LatexCategory: command
     :END:
     
**** ⨿ \amalg
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Relational
    :PROPERTIES:
    :LatexCategory: command
    :END:

**** ≤ \leq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≥ \geq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∎ \qed
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≡ \equiv
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊧ \models
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≺ \prec
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≻ \succ
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∼ \sim
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⟂ \perp
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⪯ \preceq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⪰ \succeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≃ \simeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∣ \mid
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≪ \ll
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≫ \gg
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≍ \asymp
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∥ \parallel
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊂ \subset
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊃ \supset
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≈ \approx
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋈ \bowtie
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊆ \subseteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊇ \supseteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≅ \cong
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⨝ \Join
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊏ \sqsubset
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊐ \sqsupset
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≠ \neq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⌣ \smile
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊑ \sqsubseteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊒ \sqsupseteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ≐ \doteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⌢ \frown
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∈ \in
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∋ \ni
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∝ \propto
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊢ \vdash
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊣ \dashv
     :PROPERTIES:
     :LatexCategory: command
     :END:

*** Arrows
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** ← \leftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇐ \Leftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** → \rightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇒ \Rightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↔ \leftrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇔ \Leftrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↦ \mapsto
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↩ \hookleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↼ \leftharpoonup
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↽ \leftharpoondown
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟵ \longleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟸ \Longleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟶ \longrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟹ \Longrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟷ \longleftrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟺ \Longleftrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⟼ \longmapsto
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↪ \hookrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇀ \rightharpoonup
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇁ \rightharpoondown
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↑ \uparrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇑ \Uparrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↓ \downarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇓ \Downarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↕ \updownarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ⇕ \Updownarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↗ \nearrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↘ \searrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↙ \swarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:

**** ↖ nwarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Punctuation
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** … \ldots
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋯ \cdots
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋮ \vdots
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋱ \ddots
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** : \colon
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Misc Symbol
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** ∇ \nabla
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℵ \aleph
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ′ \prime
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∀ \forall
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∞ \infty
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℏ \hbar
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∅ \emptyset
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∃ \exists
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** √ \surd
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \Box
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** △ \triangle
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \Diamond
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ı \imath
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** 𝚥 \jmath
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℓ \ell
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ¬ \neg
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̸ \not
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊤ \top
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♭ \flat
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♮ \natural
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♯ \sharp
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℘ \wp
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⊥ \bot
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♣ \clubsuit
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♢ \diamondsuit
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♡ \heartsuit
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ♠ \spadesuit
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℧ \mho
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℜ \Re
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℑ \Im
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∠ \angle
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∂ partial
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Var Symbol
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** ∑ \sum
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∏ \prod
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∐ \coprod
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∫ \int
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ∮ \oint
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋂ \bigcap
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋃ \bigcup
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⨆ \bigsqcup
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋁ \bigvee
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⋀ \bigwedge
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⨀ \bigodot
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⨂ \bigotimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⨁ \bigoplus
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⨄ \biguplus
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Log-like
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** \arccos
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \arcsin
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \arctan
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \arg
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \cos
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \cosh
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \cot
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \coth
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \csc
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \deg
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \det
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \dim
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \exp
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \gcd
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \hom
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \inf
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \ker
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \lg
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \lim
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \liminf
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \limsup
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \ln
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \log
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \max
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \min
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \Pr
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \sec
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \sin
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \sinh
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \sup
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \tan
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \tanh
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Delimiters
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** \{
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \}
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⌊ \\lfloor
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⌋ \\rfloor
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⌈ \\lceil
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⌉ \\rceil
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⟨ \\langle
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⟩ \\rangle
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⎱ \\rmoustache
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⎰ \\lmoustache
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \rgroup
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \lgroup
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \ \\backslash
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \|
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \arrowvert
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \Arrowvert
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \bracevert
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Constructs
    :PROPERTIES:
    :LatexCategory: command
    :END:
 
**** ̃ \widetilde
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̂ \widehat
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⃖ \overleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \overrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \overline
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \underline
     :PROPERTIES:
     :CUSTOM_ID: d2_underline
     :LatexCategory: command
     :END:
  
**** ︷ \overbrace
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ︸ \underbrace
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** √ \sqrt
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** \frac
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** Accents
    :PROPERTIES:
    :CUSTOM_ID: d2_sec_accents
    :LatexCategory: command
    :END:
 
**** ̂ \hat
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
****  \acute
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̄ \bar
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̇ \dot
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̆ \breve
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̌ \check
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̀ \grave
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ⃗ \vec
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̈ \ddot
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ̃ tilde
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
*** AMS Hebrew
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ϝ \digamma
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ϰ \varkappa
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℶ \beth
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℸ \daleth
     :PROPERTIES:
     :LatexCategory: command
     :END:
  
**** ℷ \gimel
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Greek Uppercase
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** \varGamma
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varDelta
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varTheta
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varLambda
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varXi
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varPi
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varSigma
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varUpsilon
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varPhi
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varPsi
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varOmega
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Arrows
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** \dashrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \dashleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇇ \leftleftarrows
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇆ \leftrightarrows
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇚ \Lleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↞ \twoheadleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↢ \leftarrowtail
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↫ \looparrowleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇋ \leftrightharpoons
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↶ \curvearrowleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \circlearrowleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↰ \Lsh
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇈ \upuparrows
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↿ \upharpoonleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇃ \downharpoonleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊸ \multimap
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↭ \leftrightsquigarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↬ \looparrowright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇌ \rightleftharpoons
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↷ \curvearrowright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \circlearrowright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↱ \Rsh
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇊ \downdownarrows
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↾ \upharpoonright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇂ \downharpoonright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↝ rightsquigarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Neg Arrows
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ↚ \nleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↛ \nrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇍ \nLeftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇏ \nRightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ↮ \nleftrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⇎ \nLeftrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Relational I
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ≦ \leqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⩽ \leqslant
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪕ \eqslantless
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≲ \lesssim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪅ \lessapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≊ \approxeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋖ \lessdot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋘ \lll
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≶ \lessgtr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋚ \lesseqgtr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪋ \lesseqqgtr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \doteqdot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≓ \risingdotseq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≒ \fallingdotseq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∽ \backsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋍ \backsimeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⫅ \subseteqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋐ \Subset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊏ \sqsubset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≼ \preccurlyeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋞ \curlyeqprec
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≾ \precsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪷ \precapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊲ \vartriangleleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊴ \trianglelefteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊨ \vDash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊪ \Vvdash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌣ \smallsmile
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌢ \smallfrown
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≏ \bumpeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≎ Bumpeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Relational II
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ≧ \geqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⩾ \geqslant
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪖ \eqslantgtr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≳ \gtrsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪆ \gtrapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋗ \gtrdot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋙ \ggg
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≷ \gtrless
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋛ \gtreqless
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪌ \gtreqqless
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≖ \eqcirc
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≗ \circeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≜ \triangleq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∼ \thicksim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≈ \thickapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⫆ \supseteqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋑ \Supset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊐ \sqsupset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≽ \succcurlyeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋟ \curlyeqsucc
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≿ \succsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪸ \succapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊳ \vartriangleright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊵ \trianglerighteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊩ \Vdash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∣ \shortmid
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∥ \shortparallel
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≬ \between
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋔ \pitchfork
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∝ \varpropto
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ◀ \blacktriangleleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∴ \therefore
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ϶ \backepsilon
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ▶ \blacktriangleright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∵ \because
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Neg Rel I
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ≮ \nless
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≰ \nleq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \nleqslant
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \nleqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪇ \lneq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≨ \lneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \lvertneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋦ \lnsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪉ \lnapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊀ \nprec
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \npreceq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋨ \precnsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪹ \precnapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≁ \nsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∤ \nshortmid
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∤ \nmid
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊬ \nvdash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊭ \nvDash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋪ \ntriangleleft
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋬ \ntrianglelefteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊈ \nsubseteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊊ \subsetneq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varsubsetneq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⫋ \subsetneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varsubsetneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Neg Rel II
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ≯ \ngtr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≱ \ngeq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \ngeqslant
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \ngeqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪈ \gneq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≩ \gneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \gvertneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋧ \gnsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪊ \gnapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊁ \nsucc
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \nsucceq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋩ \succnsim
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⪺ \succnapprox
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ≇ \ncong
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∦ \nshortparallel
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∦ \nparallel
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊭ \nvDash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊯ \nVDash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋫ \ntriangleright
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋭ \ntrianglerighteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊉ \nsupseteq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \nsupseteqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊋ \supsetneq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varsupsetneq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⫌ \supsetneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \varsupsetneqq
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Binary Operators
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ∔ \dotplus
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∖ \smallsetminus
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋒ \Cap
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋓ \Cup
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊼ \barwedge
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊻ \veebar
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌆ \doublebarwedge
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊟ \boxminus
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊠ \boxtimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊡ \boxdot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊞ \boxplus
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋇ \divideontimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋉ \ltimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋊ \rtimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋋ \leftthreetimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋌ \rightthreetimes
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋏ \curlywedge
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⋎ \curlyvee
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊝ \circleddash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊛ \circledast
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊚ \circledcirc
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \centerdot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⊺ intercal
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Misc
    :PROPERTIES:
    :LatexCategory: command
    :END:
  
**** ℏ \hbar
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ℏ \hslash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ▵ \vartriangle
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ▿ \triangledown
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** □ \square
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ◊ \lozenge
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** Ⓢ \circledS
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∠ \angle
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∡ \measuredangle
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∄ \nexists
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ℧ \mho
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** Ⅎ \Finv
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⅁ \Game
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** 𝕜 \Bbbk
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ‵ \backprime
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∅ \varnothing
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ▴ \blacktriangle
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ▾ \blacktriangledown
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ■ \blacksquare
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⧫ \blacklozenge
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ★ \bigstar
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∢ \sphericalangle
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ∁ \complement
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ð \eth
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ╱ \diagup
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ╲ diagdown
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Accents
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
**** ⃛ \dddot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⃜ \ddddot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Delimiters
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
**** \bigl
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \bigr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \Bigl
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \Bigr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \biggl
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \biggr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \Biggl
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \Biggr
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \lvert
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \rvert
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \lVert
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \rVert
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌜ \ulcorner
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌝ \urcorner
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌞ \llcorner
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** ⌟ lrcorner
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
*** AMS Special
    :PROPERTIES:
    :LatexCategory: command
    :END:
    
**** \nobreakdash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \leftroot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \uproot
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \accentedsymbol
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \xleftarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \xrightarrow
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \overset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \underset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \dfrac
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \genfrac
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \tfrac
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \binom
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \dbinom
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \tbinom
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \smash
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \eucal
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \boldsymbol
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \text
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \intertext
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \substack
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \subarray
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
**** \sideset
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
** Spacing in math mode
   :PROPERTIES:
   :CUSTOM_ID: d2_sec_mathSpacing
   :END:

In a ~math~ environment, LaTeX ignores the spaces you type and puts in the
spacing according to the normal rules for mathematics texts.  If you want
different spacing, LaTeX provides the following commands for use in math mode:

*** \;
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     A thick space (=\frac{5}{8} quad=).
     
*** \:, \>
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Both of these produce a medium space (=\frac{2}{9} \quad=).
     
*** \,
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     A thin space (=\frac{1}{6} \quad=); not restricted to math mode.
     
*** \!
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     A negative thin space (=-{\frac{1}{6}} \quad=).

** Math miscellany

*** \*
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     A "discretionary" multiplication symbol, at which a line break is
     allowed.

*** \cdots
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     A horizontal ellipsis with the dots raised to the center of the
     line.

*** \ddots
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     A diagonal ellipsis

*** \frac{num}{den}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Produces the fraction ~num~ divided by ~den~.

*** \left DELIM1 ... \right DELIM2
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     The two delimiters need not match; ~.~ acts as a null delimiter, producing
     no output.  The delimiters are sized according to the math in between.
     Example: =\left( \sum_i=1^10 a_i \right]=.

*** \overbrace{TEXT}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Generates a brace over *TEXT*.  For example,
     =\overbrace{x+\cdots+x}^{k \rm\;times}=.

*** \overline{TEXT}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Generates a horizontal line over *TEXT*.  For exampe, =\overline{x+y}=.

*** \sqrt[ROOT]{arg}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Produces the representation of the square root of *ARG*.  The optional
     argument *ROOT* determines what root to produce.  For example, the cube
     root of ~x+y~ would be typed as =$\sqrt[3]{x+y}$=.

*** \stackrel{TEXT}{RELATION}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Puts *TEXT* above *RELATION*.  For example,
     =\stackrel{f}{\longrightarrow}=.

*** \underbrace{math}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Generates *MATH* with a brace underneath.

*** \underline{text}
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Causes *TEXT*, which may be either math mode or not, to be underlined.  The
     line is always below the text, taking account of descenders.

*** \vdots
     :PROPERTIES:
     :LatexCategory: command
     :END:
   
     Produces a vertical ellipsis.

* Modes

When LaTeX is processing your input text, it is always in one of three modes:

   * Paragraph mode
   * Math mode
   * Left-to-right mode, called LR mode for short

LaTeX changes mode only when it goes up or down a staircase to a different
level, though not all level changes produce mode changes.  Mode changes occur
only when entering or leaving an environment, or when LaTeX is processing the
argument of certain text-producing commands.

"Paragraph mode" is the most common; it's the one LaTeX is in when processing
ordinary text.  In that mode, LaTeX breaks your text into lines and breaks the
lines into pages.  LaTeX is in "math mode" when it's generating a mathematical
formula.  In "LR mode", as in paragraph mode, LaTeX considers the output that it
produces to be a string of words with spaces between them.  However, unlike
paragraph mode, LaTeX keeps going from left to right; it never starts a new line
in LR mode.  Even if you put a hundred words into an =\mbox=, LaTeX would keep
typesetting them from left to right inside a single box, and then complain
because the resulting box was too wide to fit on the line.

LaTeX is in LR mode when it starts making a box with an =\mbox= command.  You
can get it to enter a different mode inside the box - for example, you can make
it enter math mode to put a formula in the box.  There are also several
text-producing commands and environments for making a box that put LaTeX in
paragraph mode.  The box make by one of these commands or environments will be
called a ~parbox~.  When LaTeX is in paragraph mode while making a box, it is
said to be in "inner paragraph mode".  Its normal paragraph mode, which it
starts out in, is called "outer paragraph mode".

* Page styles

The =\documentclass= command determines the size and position of the
page's head and foot.  The page style determines what goes in them.

** \maketitle
   :PROPERTIES:
   :CUSTOM_ID: d2_maketitle
   :LatexCategory: command
   :END:

The =\maketitle= command generates a title on a separate title page -- except in
the ~article~ class, where the title is placed at the top of the first page.
Information used to produce the title is obtained from the following
declarations:

*** \author{NAME \and NAME2}
   :PROPERTIES:
   :CUSTOM_ID: d2_author
   :LatexCategory: command
   :END:

    The =\author= command declares the document author(s), where the argument is
    a list of authors separated by =\and= commands.  Use =\\= to separate lines
    within a single author's entry -- for example, to give the author's
    institution or address.

*** \date{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_date
   :LatexCategory: command
   :END:

    The =\date= command declares *TEXT* to be the document's date.  With no
    =\date= command, the current date (see [[#d2_today][\today]]) is used.

*** \thanks{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_thanks
   :LatexCategory: command
   :END:

    The =\thanks= command produces a =\footnote= to the title, usually used for
    credit acknowledgements.

*** \title{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_title
   :LatexCategory: command
   :END:

    The =\title= command declares *TEXT* to be the title of the document.  Use
    =\\= to force a line break, as usual.

** \pagenumbering
   :PROPERTIES:
   :CUSTOM_ID: d2_pagenumbering
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \pagenumbering{STYLE}
#+END_SRC

Specifies the style of page numbers, according to *STYLE*:

- ~arabic~ :: arabic numerals
	      
- ~roman~ :: lowercase Roman numerals
	     
- ~Roman~ :: uppercase Roman numerals
	     
- ~alph~ :: lowercase letters
	    
- ~Alph~ :: uppercase letters

** \pagestyle
   :PROPERTIES:
   :CUSTOM_ID: d2_pagestyle
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \pagestyle{STYLE}
#+END_SRC

The =\pagestyle= command specifies how the headers and footers are typeset from
the current page onwards.  Values for *STYLE*:

- ~plain~ :: Just a plain page number.

- ~empty~ :: Empty headers and footers, e.g., no page numbers.

- ~headings~ :: Put running headers on each page.  The document style specifies
                what goes in the headers.

- ~myheadings~ :: Custom headers, specified via the =\markboth= or the
                  =\markright= commands.

Here are the descriptions of =\markboth= and =\markright=:

*** \markboth{LEFT}{RIGHT}
   :PROPERTIES:
   :CUSTOM_ID: d2_markboth
   :LatexCategory: command
   :END:

    Sets both the left and the right heading.  A "left-hand heading" (*LEFT*) is
    generated by the last =\markboth= command before the end of the page, while
    a "right-hand heading" (*RIGHT* is generated by the first =\markboth= or
    =\markright= that comes on the page if there is one, otherwise by the last
    one before the page.

*** \markright{RIGHT}
   :PROPERTIES:
   :CUSTOM_ID: d2_markright
   :LatexCategory: command
   :END:

    Sets the right heading, leaving the left heading unchanged.

** \thispagestyle{STYLE}
   :PROPERTIES:
   :CUSTOM_ID: d2_thispagestyle
   :LatexCategory: command
   :END:

The =\thispagestyle= command works in the same manner as the =\pagestyle=
command (see previous section) except that it changes to *STYLE* for the current
page only.

* Spaces

LaTeX has many ways to produce white (or filled) space.

Another space-producing command is =\,= to produce a "thin" space (usually =1/6
\quad=).  It can be used in text mode, but is more often useful in math mode
(see [[#d2_sec_mathSpacing][Spacing in math mode]]).

** \hspace
   :PROPERTIES:
   :CUSTOM_ID: d2_hspace
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \hspace[*]{LENGTH}
#+END_SRC

The =\hspace= command adds horizontal space.  The LENGTH argument can be
expressed in any terms that LaTeX understands: points, inches, etc.  It is a
rubber length.  You can add both negative and positive space with an =\hspace=
command; adding negative space is like backspacing.

LaTeX normally removes horizontal space that comes at the beginning or end of a
line.  To preserve this space, use the optional ~*~ form.

** \hfill
   :PROPERTIES:
   :CUSTOM_ID: d2_hfill
   :LatexCategory: command
   :END:

The =\hfill= fill command produces a "rubber length" which has no natural space
but can stretch or shrink horizontally as far as needed.

The =\fill= parameter is the rubber length itself (technically, the glue value
=0pt plus1fill=); thus, =\hspace\fill= is equivalent to =\hfill=.

** \SPACE
   :PROPERTIES:
   :CUSTOM_ID: d2_SPACE
   :LatexCategory: command
   :END:

The =\ = (space) command produces a normal interword space.  It's useful after
punctuation which shouldn't end a sentence.  For example ~Knuth's article in
Proc.\ Amer.\ Math\. Soc.\ is fundamental~.  It is also often used after control
sequences, as in ~\TeX\ is a nice system.~

In normal circumstances, =\<tab>= and =\<newline>= are equivalent to =\ =.

** \@
   :PROPERTIES:
   :LatexCategory: command
   :END:

The =\@= command makes the following punctuation character end a sentence even
if it normally would not.  This is typically used after a capital letter.  Here
are side-by-side examples with and without =\@=:

#+BEGIN_EXAMPLE
     ... in C\@. Pascal, though ...
     ... in C. Pascal, though ...
#+END_EXAMPLE

produces

#+BEGIN_QUOTE
     ... in C.  Pascal, though ... ... in C. Pascal, though ...
#+END_QUOTE
     
** \thinspace
   :PROPERTIES:
   :CUSTOM_ID: d2_thinspace
   :LatexCategory: command
   :END:

=\thinspace= produces an unbreakable and unstretchable space that is 1/6 of an
em.  This is the proper space to use in nested quotes, as in '".

** \/
   :PROPERTIES:
   :LatexCategory: command
   :END:

The =\/= command produces an "italic correction".  This is a small space defined
by the font designer for a given character, to avoid the character colliding
with whatever follows.  The italic f character typically has a large italic
correction value.

If the following character is a period or comma, it's not necessary to insert an
italic correction, since those punctuation symbols have a very small height.
However, with semicolons or colons, as well as normal letters, it can help.
Compare f: f; (in the TeX output, the 'f's are nicely separated) with f: f;.

Despite the name, roman characters can also have an italic correction.  Compare
pdfTeX (in the TeX output, there is a small space after the 'f') with pdfTeX.

** \hrulefill
   :PROPERTIES:
   :CUSTOM_ID: d2_hrulefill
   :LatexCategory: command
   :END:

The =\hrulefill= fill command produces a "rubber length" which can stretch or
shrink horizontally.  It will be filled with a horizontal rule.

** \dotfill
   :PROPERTIES:
   :CUSTOM_ID: d2_dotfill
   :LatexCategory: command
   :END:

The =\dotfill= command produces a "rubber length" that fills with dots instead
of just white space.

** \addvspace
   :PROPERTIES:
   :CUSTOM_ID: d2_addvspace
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
'\addvspace{length}'
#+END_SRC

The =\addvspace= command normally adds a vertical space of height length.
However, if vertical space has already been added to the same point in the
output by a previous =\addvspace= command, then this command will not add more
space than needed to make the natural length of the total vertical space equal
to ~length~.

** \bigskip \medskip \smallskip
   :PROPERTIES:
   :LatexCategory: command
   :END:

These commands produce a given amount of space.

*** \bigskip
   :PROPERTIES:
   :CUSTOM_ID: d2_bigskip
   :LatexCategory: command
   :END:

    The same as =\vspace{bigskipamount}=, ordinarily about one line space (with
     stretch and shrink).

*** \medskip
   :PROPERTIES:
   :CUSTOM_ID: d2_medskip
   :LatexCategory: command
   :END:

    The same as =\vspace{medskipamount}=, ordinarily about half of a line space
    (with stretch and shrink).

*** \smallskip
   :PROPERTIES:
   :CUSTOM_ID: d2_smallskip
   :LatexCategory: command
   :END:

    The same as =\vspace{smallskipamount}=, ordinarily about a quarter of a line
    space (with stretch and shrink).

    The =\...amount= parameters are determined by the document class.

** \vfill
   :PROPERTIES:
   :CUSTOM_ID: d2_vfill
   :LatexCategory: command
   :END:

The =\vfill= fill command produces a rubber length (glue) which can stretch or
shrink vertically as far as needed.  It's equivalent to =\vspace{\fill}= (see
[[#d2_hfill][\hfill]]).

** \vspace[*]{LENGTH}
   :PROPERTIES:
   :CUSTOM_ID: d2_vspace
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \vspace[*]{LENGTH}
#+END_SRC

The =\vspace= command adds the vertical space *LENGTH*, i.e., a rubber length.
*LENGTH* can be negative or positive.

Ordinarily, LaTeX removes vertical space added by =\vspace= at the top or bottom
of a page.  With the optional ~*~ argument, the space is not removed.

* Boxes
  :PROPERTIES:
  :CUSTOM_ID: d2_chap_boxes
  :END:

All the predefined length parameters (see [[#d2_predefinedLengths][Predefined lengths]]) can be used in the
arguments of the box-making commands.

** \mbox{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_mbox
   :LatexCategory: command
   :END:

The =\mbox= command creates a box just wide enough to hold the text created by
its argument.  The *TEXT* is not broken into lines, so it can be used to prevent
hyphenation.

** \fbox and \framebox
   :PROPERTIES:
   :CUSTOM_ID: d2_fbox_framebox
   :LatexCategory: command
   :END:

Synopses:

#+BEGIN_SRC latex
     \fbox{TEXT}
     \framebox[WIDTH][POSITION]{TEXT}
#+END_SRC

The =\fbox= and =\framebox= commands are like =\mbox=, except that they put a
frame around the outside of the box being created.

In addition, the =\framebox= command allows for explicit specification of the
box width with the optional *WIDTH* argument (a dimension), and positioning with
the optional *POSITION* argument.

Both commands produce a rule of thickness =\fboxrule= (default ~.4pt~), and
leave a space of =\fboxsep= (default ~3pt~) between the rule and the contents of
the box.

See [[#d2_framebox][\framebox]] (picture), for the =\framebox= command in the ~picture~
environment.

** lrbox
   :PROPERTIES:
   :CUSTOM_ID: d2_env_lrbox
   :LatexCategory: environment
   :END:

#+BEGIN_SRC latex
'\begin{lrbox}{cmd} text \end{lrbox}'
#+END_SRC

This is the environment form of =\sbox=.

The text inside the environment is saved in the box ~cmd~, which must have been
declared with =\newsavebox=.

** \makebox
   :PROPERTIES:
   :CUSTOM_ID: d2_makebox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \makebox[WIDTH][POSITION]{TEXT}
#+END_SRC

The =\makebox= command creates a box just wide enough to contain the *TEXT*
specified.  The width of the box is specified by the optional *WIDTH* argument.
The position of the text within the box is determined by the optional *POSITION*
argument, which may take the following values:

- 'c' :: Centered (default).
	 
- 'l' :: Flush left.
	 
- 'r' :: Flush right.
	 
- 's' :: Stretch (justify) across entire *WIDTH*; *TEXT* must contain
         stretchable space for this to work.

=\makebox= is also used within the picture environment, see [[#d2_makebox][\makebox]] (picture).

** \parbox
   :PROPERTIES:
   :CUSTOM_ID: d2_parbox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \parbox[POSITION][HEIGHT][INNER-POS]{WIDTH}{TEXT}
#+END_SRC

The =\parbox= command produces a box whose contents are created in ~paragraph~
mode.  It should be used to make a box small pieces of text, with nothing fancy
inside.  In particular, you shouldn't use any paragraph-making environments
inside a =\parbox= argument.  For larger pieces of text, including ones
containing a paragraph-making environment, you should use a ~minipage~
environment (see [[#d2_env_minipage][minipage]]).

=\parbox= has two mandatory arguments:

- WIDTH :: the width of the parbox;
	   
- TEXT :: the text that goes inside the parbox.

The optional *POSITION* argument allows you to align either the top or bottom
line in the parbox with the baseline of the surrounding text (default is top).

The optional *HEIGHT* argument overrides the natural height of the box.

The *INNER-POS* argument controls the placement of the text inside the box, as
follows; if it is not specified, *POSITION* is used.

- ~t~ :: text is placed at the top of the box.
	 
- ~c~ :: text is centered in the box.
	 
- ~b~ :: text is placed at the bottom of the box.
	 
- ~s~ :: stretch vertically; the text must contain vertically stretchable space
         for this to work.

** \raisebox
   :PROPERTIES:
   :CUSTOM_ID: d2_raisebox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \raisebox{distance}[HEIGHT][DEPTH]{text}
#+END_SRC

The =\raisebox= command raises or lowers *TEXT*.  The first mandatory argument
specifies how high *TEXT* is to be raised (or lowered if it is a negative
amount).  *TEXT* itself is processed in LR mode.

The optional arguments *HEIGHT* and *DEPTH* are dimensions.  If they are
specified, LaTeX treats *TEXT* as extending a certain distance above the
baseline (height) or below (depth), ignoring its natural height and depth.

** \savebox
   :PROPERTIES:
   :CUSTOM_ID: d2_savebox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \savebox{\BOXCMD}[WIDTH][POS]{TEXT}
#+END_SRC

This command typeset *TEXT* in a box just as with =\makebox= (see [[#d2_makebox][\makebox]]),
except that instead of printing the resulting box, it saves it in the box
labeled =\BOXCMD=, which must have been declared with =\newsavebox= (see
[[#d2_newsavebox][\newsavebox]]).

** \sbox{\BOXCMD}{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_sbox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \sbox{\BOXCMD}{TEXT}
#+END_SRC

=\sbox= types *TEXT* in a box just as with =\mbox= (see [[#d2_mbox][\mbox]]) except that
instead of the resulting box being included in the normal output, it is saved in
the box labeled =\BOXCMD=.  =\BOXCMD= must have been previously declared with
=\newsavebox= (see [[#d2_newsavebox][\newsavebox]]).

** \usebox{\BOXCMD}
   :PROPERTIES:
   :CUSTOM_ID: d2_usebox
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \usebox{\BOXCMD}
#+END_SRC

=\usebox= producesthe box most recently saved in the bin =\BOXCMD= by a
=\savebox= command (see [[#d2_savebox][\savebox]]).

* Special insertions

LaTeX provides commands for inserting characters that have a special meaning do
not correspond to simple characters you can type.

** Reserved characters

The following characters play a special role in LaTeX and are called "reserved
characters" or "special characters".

#+BEGIN_QUOTE
     # $ % & ~ _ ^ \ { }
#+END_QUOTE

Whenever you write one of these characters into your file, LaTeX will do
something special.  If you simply want the character to be printed as itself,
include a ~\~ in front of the character.  For example, =\$= will produce ~$~ in
your output.

One exception to this rule is ~\~ itself, because =\\= has its own special
(context-dependent) meaning.  A roman \ is produced by typing =$\backslash$= in
your file, and a typewriter ~\~ is produced by using ~\~ in a verbatim command
(see [[#d2_env_verbatim][verbatim]]).

Also, =\~= and =\^= place tilde and circumflex accents over the following
letter, as in o~ and o^ (see [[#d2_sec_accents][Accents]]); to get a standalone =~= or ~^~, you can
again use a verbatim command.

Finally, you can access any character of the current font once you know its
number by using the =\symbol= command.  For example, the visible space character
used in the =\verb*= command has the code decimal 32, so it can be typed as
=\symbol{32}=.

You can also specify octal numbers with ~'~ or hexadecimal numbers with ~"~, so
the previous example could also be written as =\symbol{'40}= or =\symbol{"20}=.

** Text symbols							     :symbol:

LaTeX provides commands to generate a number of non-letter symbols in running
text.  Some of these, especially the more obscure ones, are not available in
OT1; you may need to load the ~textcomp~ package.

*** \copyright, \textcopyright
    :PROPERTIES:
    :CUSTOM_ID: d2_copyright_textcopyright
    :LatexCategory: command
    :END:

    The copyright symbol, (C).

*** \dag
    :PROPERTIES:
    :CUSTOM_ID: d2_dag
    :LatexCategory: command
    :END:

    The dagger symbol (in text).

*** \ddag
    :PROPERTIES:
    :CUSTOM_ID: d2_ddag
    :LatexCategory: command
    :END:

    The double dagger symbol (in text).

*** \LaTeX
    :PROPERTIES:
    :CUSTOM_ID: d2_LaTeX
    :LatexCategory: command
    :END:

    The LaTeX logo.

*** \guillemotleft (<<)
    :PROPERTIES:
    :LatexCategory: command
    :END:

*** \guillemotright (>>)
    :PROPERTIES:
    :LatexCategory: command
    :END:

*** \guilsinglleft (<)
    :PROPERTIES:
    :LatexCategory: command
    :END:

*** \guilsinglright (>)
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Double and single angle quotation marks, commonly used in French:
    ~<<~, ~>>~, ~<~, ~>~.

*** \ldots
    :PROPERTIES:
    :LatexCategory: command
    :END:

*** \dots
    :PROPERTIES:
    :LatexCategory: command
    :END:

*** \textellipsis
    :PROPERTIES:
    :LatexCategory: command
    :END:

    An ellipsis (three dots at the baseline): ~...~.  =\ldots= and =\dots= also
    work in math mode.

*** \lq
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Left (opening) quote: '.

*** \P, \textparagraph
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Paragraph sign (pilcrow).

*** \pounds, \textsterling
    :PROPERTIES:
    :LatexCategory: command
    :END:

    English pounds sterling: #.

*** \quotedblbase (,,), \quotesinglbase (,)
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Double and single quotation marks on the baseline: ,, and ,.

*** \rq
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Right (closing) quote: '.

*** \S
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Section symbol.

*** \TeX
    :PROPERTIES:
    :LatexCategory: command
    :END:

    The TeX logo.

*** \textasciicircum
    :PROPERTIES:
    :LatexCategory: command
    :END:

    ASCII circumflex: ^.

*** \textasciitilde
    :PROPERTIES:
    :LatexCategory: command
    :END:

    ASCII tilde: =~=.

*** \textasteriskcentered
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Centered asterisk: *.

*** \textbackslash
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Backslash: \.

*** \textbar
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Vertical bar: |.

*** \textbardbl
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Double vertical bar.

*** \textbigcircle
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Big circle symbol.

*** \textbraceleft
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Left brace: {.

*** \textbraceright
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Right brace: }.

*** \textbullet
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Bullet: *.

*** \textcircled{LETTER}
    :PROPERTIES:
    :LatexCategory: command
    :END:

    LETTER in a circle, as in (R).

*** \textcompwordmark, \textcapitalwordmark, \textascenderwordmark
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Composite word mark (invisible).  The =\textcapital...= form has the cap
    height of the font, while the =\textascender...= form has the ascender
    height.

*** \textdagger
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Dagger: \dag.

*** \textdaggerdbl
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Double dagger: \ddag.

*** \textdollar (or '$')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Dollar sign: $.

*** \textemdash (or '---')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Em-dash: -- (for punctuation).

*** \textendash (or '--')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    En-dash: -- (for ranges).

*** \texteuro
    :PROPERTIES:
    :LatexCategory: command
    :END:

    The Euro symbol: Euro.

*** \textexclamdown (or '!`')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Upside down exclamation point: !.

*** \textgreater
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Greater than: >.

*** \textless
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Less than: <.

*** \textleftarrow
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Left arrow.

*** \textordfeminine, \textordmasculine
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Feminine and masculine ordinal symbols: a, o.

*** \textperiodcentered
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Centered period: \cdot.

*** \textquestiondown (or '?`')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Upside down questionation point: ?.

*** \textquotedblleft (or '``')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Double left quote: ".

*** \textquotedblright (or ''')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Double right quote: ".

*** \textquoteleft (or '`')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Single left quote: '.

*** \textquoteright (or ''')
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Single right quote: '.

*** \textquotestraightbase, \textquotestraightdblbase
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Single and double straight quotes on the baseline.

*** \textregistered
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Registered symbol: (R).

*** \textrightarrow
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Right arrow.

*** \textthreequartersemdash
    :PROPERTIES:
    :LatexCategory: command
    :END:

    "Three-quarters" em-dash, between en-dash and em-dash.

*** \texttrademark
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Trademark symbol: ^{\hbox{TM}}.

*** \texttwelveudash
    :PROPERTIES:
    :LatexCategory: command
    :END:

    "Two-thirds" em-dash, between en-dash and em-dash.

*** \textunderscore
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Underscore: _.

*** \textvisiblespace
   :PROPERTIES:
   :LatexCategory: command
   :END:

    Visible space symbol.

** Accents

LaTeX has wide support for many of the world's scripts and languages, through
the ~babel~ package and related support.  This section does not attempt to cover
all that support.  It merely lists the core LaTeX commands for creating accented
characters.

The =\capital...= commands produce alternative forms for use with capital
letters.  These are not available with OT1.

*** \", \capitaldieresis
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces an umlaut (dieresis), as in o".

*** \', \capitalacute
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces an acute accent, as in o'.  In the ~tabbing~ environment, pushes
    current column to the right of the previous column (see [[#d2_env_tabbing][tabbing]]).

*** \.
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a dot accent over the following, as in o..

*** \=, \capitalmacron
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a macron (overbar) accent over the following, as in o=.

*** \^, \capitalcircumflex
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a circumflex (hat) accent over the following, as in o^.

*** \`, \capitalgrave
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a grave accent over the following, as in o`.  In the ~tabbing~
    environment, move following text to the right margin (see [[#d2_env_tabbing][tabbing]]).

*** \~, \capitaltilde
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a tilde accent over the following, as in n~.

*** \b
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a bar accent under the following, as in o_.

*** \c, \capitalcedilla
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a cedilla accent under the following, as in c,.

*** \d, \capitaldotaccent
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a dot accent under the following, as in .o.

*** \H, \capitalhungarumlaut
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a long Hungarian umlaut accent over the following, as in o''.

*** \i
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a dotless i, as in 'i'.

*** \j
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a dotless j, as in 'j'.

*** \k, \capitalogonek.
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a letter with ogonek, as in 'o;'.  Not available in the OT1
    encoding.

*** \r, \capitalring
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a ring accent, as in 'o*'.

*** \t, \capitaltie, \newtie, \capitalnewtie
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a tie-after accent, as in 'oo['.  The '\newtie' form is centered in
    its box.

*** \u, \capitalbreve
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a breve accent, as in 'o('.

*** \underbar
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Not exactly an accent, this produces a bar under the argument text.  The
     argument is always processed in horizontal mode.  The bar is always a fixed
     position under the baseline, thus crossing through descenders.  See also
     [[#d2_underline][\underline]] in Math miscellany.

*** \v, \capitalcaron
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Produces a ha'c<ek (check, caron) accent, as in 'o<'.

** Non-English characters

Here are the basic LaTeX commands for inserting characters commonly used in
languages other than English.

*** \aa, \AA
    :PROPERTIES:
    :LatexCategory: command
    :END:

    aa and AA.

*** \ae, \AE
    :PROPERTIES:
    :LatexCategory: command
    :END:

    ae and AE.

*** \dh, \DH
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Icelandic letter eth: d and D.

*** \dj, \DJ
    :PROPERTIES:
    :LatexCategory: command
    :END:

    xxxx

*** \ij, \IJ
    :PROPERTIES:
    :LatexCategory: command
    :END:

    ij and IJ (except somewhat closer together than appears here).

*** \l, \L
    :PROPERTIES:
    :LatexCategory: command
    :END:

    /l and /L.

*** \ng, \NG
    :PROPERTIES:
    :LatexCategory: command
    :END:

    xxxx

*** \o, \O
    :PROPERTIES:
    :LatexCategory: command
    :END:

    /o and /O.

*** \oe, \OE
    :PROPERTIES:
    :LatexCategory: command
    :END:

    oe and OE.

*** \ss, \SS
    :PROPERTIES:
    :LatexCategory: command
    :END:

    ss and SS.

*** \th, \TH
    :PROPERTIES:
    :LatexCategory: command
    :END:

    Icelandic letter thorn: th and TH.

** \rule
   :PROPERTIES:
   :CUSTOM_ID: d2_rule
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \rule[RAISE]{WIDTH}{THICKNESS}
#+END_SRC

The =\rule= command produces "rules", that is, lines or rectangles.  The
arguments are:

- RAISE :: How high to raise the rule (optional).

- WIDTH :: The length of the rule (mandatory).

- THICKNESS :: The thickness of the rule (mandatory).

** \today
   :PROPERTIES:
   :CUSTOM_ID: d2_today
   :LatexCategory: command
   :END:

The =\today= command produces today's date, in the format ~MONTH DD, YYYY~; for
example, ~July 4, 1976~.  It uses the predefined counters =\day=, =\month=, and
=\year= (see [[#d2_day][\day]] [[#d2_month][\month]] [[#d2_year][\year]]) to do this.  It is not updated as the program
runs.

The ~datetime~ package, among others, can produce a wide variety of other date
formats.

* Splitting the input

A large document requires a lot of input.  Rather than putting the whole input
in a single large file, it's more efficient to split it into several smaller
ones.  Regardless of how many separate files you use, there is one that is the
root file; it is the one whose name you type when you run LaTeX.

** \include
   :PROPERTIES:
   :CUSTOM_ID: d2_include
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \include{FILE}
#+END_SRC

If no =\includeonly= command is present, the =\include= command executes
=\clearpage= to start a new page (see [[#d2_clearpage][\clearpage]]), then reads *FILE*, then does
another =\clearpage=.

Given an =\includeonly= command, the =\include= actions are only run if *FILE*
is listed as an argument to =\includeonly=.  See the next section.

The =\include= command may not appear in the preamble or in a file read by
another =\include= command.

** \includeonly
   :PROPERTIES:
   :CUSTOM_ID: d2_includeonly
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \includeonly{FILE1,FILE2,...}
#+END_SRC

The =\includeonly= command controls which files will be read by subsequent
=\include= commands.  The list of filenames is comma-separated.  Each *FILE*
must exactly match a filename specified in a =\include= command for the
selection to be effective.

This command can only appear in the preamble.

** \input
   :PROPERTIES:
   :CUSTOM_ID: d2_input
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \input{FILE}
#+END_SRC

The =\input= command causes the specified *FILE* to be read and processed, as if
its contents had been inserted in the current file at that point.

If *FILE* does not end in ~.tex~ (e.g., ~foo~ or ~foo.bar~), it is first tried
with that extension (~foo.tex~ or ~foo.bar.tex~).  If that is not found, the
original *FILE* is tried (~foo~ or ~foo.bar~).

* Front/back matter

** Tables of contents
   :PROPERTIES:
   :CUSTOM_ID: d2_sec_toc
   :END:

A table of contents is produced with the =\tableofcontents= command.  You put
the command right where you want the table of contents to go; LaTeX does the
rest for you.  A previous run must have generated a ~.toc~ file.

The =\tableofcontents= command produces a heading, but it does not automatically
start a new page.  If you want a new page after the table of contents, write a
=\newpage= command after the =\tableofcontents= command.

The analogous commands =\listoffigures= and =\listoftables= produce a list of
figures and a list of tables, respectively.  Everything works exactly the same
as for the table of contents.

The command =\nofiles= overrides these commands, and _prevents_ any of these
lists from being generated.

*** \addcontentsline
   :PROPERTIES:
   :CUSTOM_ID: d2_addcontentsline
   :LatexCategory: command
   :END:

The =\addcontentsline{EXT}{UNIT}{TEXT}= command adds an entry to the specified
list or table where:

- EXT :: The extension of the file on which information is to be written,
         typically one of: ~toc~ (table of contents), ~lof~ (list of figures),
         or ~lot~ (list of tables).

- UNIT :: The name of the sectional unit being added, typically one of the
          following, matching the value of the *EXT* argument:

     * ~toc~ :: The name of the sectional unit: ~part~, ~chapter~, ~section~,
                ~subsection~, ~subsubsection~.
		
     * ~lof~ :: For the list of figures.
		
     * ~lot~ :: For the list of tables.

- ENTRY :: The actual text of the entry.

What is written to the ~.EXT~ file is the command =\contentsline{UNIT}{NAME}=.

*** \addtocontents
   :PROPERTIES:
   :CUSTOM_ID: d2_addtocontents
   :LatexCategory: command
   :END:

The =\addtocontents{EXT}{TEXT}= command adds text (or formatting commands)
directly to the ~.EXT~ file that generates the table of contents or lists of
figures or tables.

- EXT :: The extension of the file on which information is to be written: ~toc~
         (table of contents), ~lof~ (list of figures), or ~lot~ (list of
         tables).

- TEXT :: The text to be written.

** Glossaries

The command =\makeglossary= enables creating glossaries.

The command =\glossary{TEXT}= writes a glossary entry for *TEXT* to an auxiliary
file with the ~.glo~ extension.

Specifically, what gets written is the command =\glossaryentry{TEXT}{PAGENO}=,
where *PAGENO* is the current =\thepage= value.

The ~glossary~ package on CTAN provides support for fancier glossaries.

** Indexes

The command =\makeindex= enables creating indexes.  Put this in the preamble.

The command =\index{TEXT}= writes an index entry for *TEXT* to an auxiliary file
with the ~.idx~ extension.

Specifically, what gets written is the command =\indexentry{TEXT}{PAGENO}=,
where *PAGENO* is the current =\thepage= value.

To generate a index entry for ~bar~ that says ~See foo~, use a vertical bar:
=\index{bar|see{foo}}=.  Use ~seealso~ instead of ~see~ to make a ~See also~
entry.

The text ~See~ is defined by the macro =\seename=, and ~See also~ by the macro
=\alsoname=.  These can be redefined for other languages.

The generated ~.idx~ file is then sorted with an external command, usually
either ~makeindex~ (http://mirror.ctan.org/indexing/makeindex) or (the
multi-lingual) ~xindy~ (http://xindy.sourceforge.net).  This results in a ~.ind~
file, which can then be read to typeset the index.

The index is usually generated with the =\printindex= command.  This is defined
in the ~makeidx~ package, so =\usepackage{makeidx}= needs to be in the preamble.

The rubber length =\indexspace= is inserted before each new letter in the
printed index; its default value is ~10pt plus5pt minus3pt~.

The ~showidx~ package causes each index entries to be shown in the margin on the
page where the entry appears.  This can help in preparing the index.

The ~multind~ package supports multiple indexes.  See also the TeX FAQ entry on
this topic, http://www.tex.ac.uk/cgi-bin/texfaq2html?label=multind.

* Letters
  :PROPERTIES:
  :CUSTOM_ID: d2_chap_letters
  :END:

You can use LaTeX to typeset letters, both personal and business.  The ~letter~
document class is designed to make a number of letters at once, although you can
make just one if you so desire.

Your ~.tex~ source file has the same minimum commands as the other document
classes, i.e., you must have the following commands as a minimum:

#+BEGIN_SRC latex
      \documentclass{letter}
      \begin{document}
       ... letters ...
      \end{document}
#+END_SRC

Each letter is a ~letter~ environment, whose argument is the name and address of
the recipient.  For example, you might have:

#+BEGIN_SRC latex
      \begin{letter}{Mr. Joe Smith\\ 2345 Princess St.
           \\ Edinburgh, EH1 1AA}
        ...
      \end{letter}
#+END_SRC

The letter itself begins with the =\opening= command.  The text of the letter
follows.  It is typed as ordinary LaTeX input.  Commands that make no sense in a
letter, like =\chapter=, do not work.  The letter closes with a =\closing=
command.

After the ~closing~, you can have additional material.  The =\cc= command
produces the usual "cc: ...".  There's also a similar =\encl= command for a list
of enclosures.  With both these commands, use =\\= to separate the items.

These commands are used with the ~letter~ class.

** \address{RETURN-ADDRESS}
   :PROPERTIES:
   :CUSTOM_ID: d2_address
   :LatexCategory: command
   :END:

The =\address= specifies the return address of a letter, as it should appear on
the letter and the envelope.  Separate lines of the address should be separated
by =\\= commands.

If you do not make an =\address= declaration, then the letter will be formatted
for copying onto your organisation's standard letterhead.  (see [[#d2_chap_Overview][Overview]], for
details on your local implementation).  If you give an =\address= declaration,
then the letter will be formatted as a personal letter.

** \cc
   :PROPERTIES:
   :CUSTOM_ID: d2_cc
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \cc{NAME1\\NAME2}
#+END_SRC

Produce a list of *NAMEs* the letter was copied to.  Each name is printed on a
separate line.

** \closing
   :PROPERTIES:
   :CUSTOM_ID: d2_closing
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \closing{text}
#+END_SRC

A letter closes with a =\closing= command, for example, =\closing{Best Regards,}=

** \encl
   :PROPERTIES:
   :CUSTOM_ID: d2_encl
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \encl{LINE1\\LINE2}
#+END_SRC

Declare a list of one more enclosures.

** \location
   :PROPERTIES:
   :CUSTOM_ID: d2_location
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
    \location{address}
#+END_SRC

This modifies your organisation's standard address.  This only appears if the
~firstpage~ pagestyle is selected.

** \makelabels
   :PROPERTIES:
   :CUSTOM_ID: d2_makelabels
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \makelabels{number}
#+END_SRC

If you issue this command in the preamble, LaTeX will create a sheet of address
labels.  This sheet will be output before the letters.

** \name
   :PROPERTIES:
   :CUSTOM_ID: d2_name
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \name{June Davenport}
#+END_SRC

Your name, used for printing on the envelope together with the return address.

** \opening{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_opening
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \opening{TEXT}
#+END_SRC

A letter begins with the =\opening= command.  The mandatory argument, *TEXT*, is
whatever text you wish to start your letter.  For instance:

     =\opening{Dear Joe,}=

** \ps
   :PROPERTIES:
   :CUSTOM_ID: d2_ps
   :LatexCategory: command
   :END:

Use the =\ps= command to start a postscript in a letter, after =\closing=.

** \signature{TEXT}
   :PROPERTIES:
   :CUSTOM_ID: d2_signature
   :LatexCategory: command
   :END:

Your name, as it should appear at the end of the letter underneath the space for
your signature.  =\\= starts a new line within *TEXT* as usual.

** \startbreaks
   :PROPERTIES:
   :CUSTOM_ID: d2_startbreaks
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \startbreaks
#+END_SRC

Used after a =\stopbreaks= command to allow page breaks again.

** \stopbreaks
   :PROPERTIES:
   :CUSTOM_ID: d2_stopbreaks
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \stopbreaks
#+END_SRC

Inhibit page breaks until a =\startbreaks= command occurs.

** \telephone
   :PROPERTIES:
   :CUSTOM_ID: d2_telephone
   :LatexCategory: command
   :END:

#+BEGIN_SRC latex
   \telephone{number}
#+END_SRC

This is your telephone number.  This only appears if the ~firstpage~ pagestyle
is selected.

* Terminal input/output

** \typein[CMD]{MSG}
   :PROPERTIES:
   :CUSTOM_ID: d2_typein
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \typein[\CMD]{MSG}
#+END_SRC

=\typein= prints MSG on the terminal and causes LaTeX to stop and wait for you
to type a line of input, ending with return.  If the optional =\CMD= argument is
omitted, the typed input is processed as if it had been included in the input
file in place of the =\typein= command.  If the =\CMD= argument is present, it
must be a command name.  This command name is then defined or redefined to be
the typed input.

** \typeout{MSG}
   :PROPERTIES:
   :CUSTOM_ID: d2_typeout
   :LatexCategory: command
   :END:

Synopsis:

#+BEGIN_SRC latex
     \typeout{MSG}
#+END_SRC

Prints ~msg~ on the terminal and in the ~log~ file.  Commands in ~msg~ that are
defined with =\newcommand= or =\renewcommand= (among others) are replaced by
their definitions before being printed.

LaTeX's usual rules for treating multiple spaces as a single space and ignoring
spaces after a command name apply to ~msg~.  A =\space= command in ~msg~ causes
a single space to be printed, independent of surrounding spaces.  A ~^^J~ in
~msg~ prints a newline.

* Command line

The input file specification indicates the file to be formatted; TeX uses ~.tex~
as a default file extension.  If you omit the input file entirely, TeX accepts
input from the terminal.  You specify command options by supplying a string as a
parameter to the command; e.g.

#+BEGIN_QUOTE
     latex '\nonstopmode\input foo.tex'
#+END_QUOTE

will process ~foo.tex~ without pausing after every error.

If LaTeX stops in the middle of the document and gives you a ~*~ prompt, it is
waiting for input.  You can type =\stop= (and return) and it will prematurely
end the document.

* Appendix A Document templates

Although not reference material, perhaps these document templates will be
useful.  Additional template resources are listed
http://tug.org/interest.html#latextemplates.

** ~book~ template

#+BEGIN_SRC latex
\documentclass{book}
\title{Book Class Template}
\author{Alex Author}

\begin{document}
\maketitle

\chapter{First}
Some text.

\chapter{Second}
Some other text.

\section{A subtopic}
The end.
\end{document}
#+END_SRC

** ~beamer~ template

The 'beamer' class creates slides presentations.

#+BEGIN_SRC latex
\documentclass{beamer}

\title{Beamer Class template}
\author{Alex Author}
\date{July 31, 2007}

\begin{document}

\maketitle

% without [fragile], any {verbatim} code gets mysterious errors.
\begin{frame}[fragile]
 \frametitle{First Slide}

\begin{verbatim}
  This is \verbatim!
\end{verbatim}

\end{frame}

\end{document}
#+END_SRC

** ~tugboat~ template

~TUGboat~ is the journal of the TeX Users Group, http://tug.org/TUGboat.

#+BEGIN_SRC latex
\documentclass{ltugboat}
\usepackage{graphicx}
\usepackage{ifpdf}
\ifpdf
\usepackage[breaklinks,colorlinks,linkcolor=black,citecolor=black,
            urlcolor=black]{hyperref}
\else
\usepackage{url}
\fi

\title{Example \TUB\ article}

% repeat info for each author.
\author{First Last}
\address{Street Address \\ Town, Postal \\ Country}
\netaddress{user (at) example dot org}
\personalURL{http://example.org/~user/}

\begin{document}

\maketitle

\begin{abstract}
This is an example article for \TUB{}.
\end{abstract}

\section{Introduction}

This is an example article for \TUB, from
\url{http://tug.org/TUGboat/location.html}.

We recommend the graphicx package for image inclusions, and the
hyperref package for active url's (in the \acro{PDF} output).
Nowadays \TUB\ is produced using \acro{PDF} files exclusively.

The \texttt{ltugboat} class provides these abbreviations and many more:

% verbatim blocks are often better in \small
\begin{verbatim}[\small]
\AllTeX \AMS \AmS \AmSLaTeX \AmSTeX \aw \AW
\BibTeX \CTAN \DTD \HTML
\ISBN \ISSN \LaTeXe
\Mc \mf \MFB \mtex \PCTeX \pcTeX
\PiC \PiCTeX \plain \POBox \PS
\SC \SGML \SliTeX \TANGLE \TB \TP
\TUB \TUG \tug
\UG \UNIX \VAX \XeT \WEB \WEAVE

\Dash \dash \vellipsis \bull \cents \Dag
\careof \thinskip

\acro{FRED} -> {\small[er] fred}  % please use!
\cs{fred}   -> \fred
\env{fred}  -> \begin{fred}
\meta{fred} -> <fred>
\nth{n}     -> 1st, 2nd, ...
\sfrac{3/4} -> 3/4
\booktitle{Book of Fred}
\end{verbatim}

For more information, see the ltubguid document at:
\url{http://mirror.ctan.org/macros/latex/contrib/tugboat}
(we recommend using \verb|mirror.ctan.org| for \CTAN\ references).

Email \verb|tugboat@tug.org| if problems or questions.

\bibliographystyle{plain}  % we recommend the plain bibliography style
\nocite{book-minimal}      % just making the bibliography non-empty
\bibliography{xampl}       % xampl.bib comes with BibTeX

\makesignature
\end{document}
#+END_SRC
